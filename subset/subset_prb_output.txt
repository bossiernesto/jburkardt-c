14 November 2012 11:21:25 AM

SUBSET_PRB
  C version
  Test the SUBSET library.

TEST000
  Call RANDOM_INITIALIZE to initialize the
  RANDOM random number generator.

RANDOM_INITIALIZE
  Initialize RANDOM with arbitrary SEED = 3706994225

  RANDOM_INITIALIZE returns SEED = 3706994225

TEST001
  ASM_ENUM returns the number of alternating sign
  matrices of a given order.

     0       1
     1       1
     2       2
     3       7
     4      42
     5     429
     6    7436
     7  218348

TEST002
  ASM_TRIANGLE returns a row of the alternating sign
  matrix triangle.

   0         1  
   1         1         1  
   2         2         3         2  
   3         7        14        14         7  
   4        42       105       135       105        42  
   5       429      1287      2002      2002      1287       429  
   6      7436     26026     47320     56784     47320     26026      7436  
   7    218348    873392   1813968   2519400   2519400   1813968    873392    218348  

TEST003
  BELL computes Bell numbers.
  BELL_VALUES returns some exact values.

  N  exact C(I)  computed C(I)

     0         1         1
     1         1         1
     2         2         2
     3         5         5
     4        15        15
     5        52        52
     6       203       203
     7       877       877
     8      4140      4140
     9     21147     21147
    10    115975    115975

TEST9001
  BVEC_ADD adds binary vectors representing integers;
  BVEC_SUB subtracts binary vectors representing integers;

        I        J        K = I + J    L = I - J


       -57        92
  Directly:                 35      -149
  BVEC_ADD, BVEC_SUB        35      -149

        66        12
  Directly:                 78        54
  BVEC_ADD, BVEC_SUB        78        54

       -17       -87
  Directly:               -104        70
  BVEC_ADD, BVEC_SUB      -104        70

       -49       -78
  Directly:               -127        29
  BVEC_ADD, BVEC_SUB      -127        29

       -92        27
  Directly:                -65      -119
  BVEC_ADD, BVEC_SUB       -65      -119

       -88       -10
  Directly:                -98       -78
  BVEC_ADD, BVEC_SUB       -98       -78

       -20        51
  Directly:                 31       -71
  BVEC_ADD, BVEC_SUB        31       -71

        60      -100
  Directly:                -40       160
  BVEC_ADD, BVEC_SUB       -40       160

        80       -30
  Directly:                 50       110
  BVEC_ADD, BVEC_SUB        50       110

       -81       -98
  Directly:               -179        17
  BVEC_ADD, BVEC_SUB      -179        17

TEST9002
  BVEC_COMPLEMENT2 returns the two's complement
  of a (signed) binary vector;


  I = -57
  J = 57
  1111000111
  0000111001

  I = 92
  J = -92
  0001011100
  1110100100

  I = 66
  J = -66
  0001000010
  1110111110

  I = 12
  J = -12
  0000001100
  1111110100

  I = -17
  J = 17
  1111101111
  0000010001

TEST9003
  BVEC_MUL multiplies binary vectors
  representing integers;

        I        J        K = I * J


       -57        92
  Directly:              -5244
  BVEC_MUL               -5244

        66        12
  Directly:                792
  BVEC_MUL                 792

       -17       -87
  Directly:               1479
  BVEC_MUL                1479

       -49       -78
  Directly:               3822
  BVEC_MUL                3822

       -92        27
  Directly:              -2484
  BVEC_MUL               -2484

       -88       -10
  Directly:                880
  BVEC_MUL                 880

       -20        51
  Directly:              -1020
  BVEC_MUL               -1020

        60      -100
  Directly:              -6000
  BVEC_MUL               -6000

        80       -30
  Directly:              -2400
  BVEC_MUL               -2400

       -81       -98
  Directly:               7938
  BVEC_MUL                7938

TEST005
  CATALAN computes Catalan numbers.
  CATALAN_VALUES returns some exact values.

  N  exact C(I)  computed C(I)

     0         1         1
     1         1         1
     2         2         2
     3         5         5
     4        14        14
     5        42        42
     6       132       132
     7       429       429
     8      1430      1430
     9      4862      4862
    10     16796     16796

TEST006
  CATALAN_ROW_NEXT computes a row of the Catalan triangle.

  First, compute row 7:
   7         1         7        27        75       165       297       429       429

  Now compute rows consecutively, one at a time:

   0         1
   1         1         1
   2         1         2         2
   3         1         3         5         5
   4         1         4         9        14        14
   5         1         5        14        28        42        42
   6         1         6        20        48        90       132       132
   7         1         7        27        75       165       297       429       429
   8         1         8        35       110       275       572      1001      1430      1430
   9         1         9        44       154       429      1001      2002      3432      4862      4862
  10         1        10        54       208       637      1638      3640      7072     11934     16796     16796

TEST011
  COMB_NEXT produces combinations.

  Combinations of size K = 1

     1
     2
     3
     4
     5

  Combinations of size K = 2

     1     2
     1     3
     1     4
     1     5
     2     3
     2     4
     2     5
     3     4
     3     5
     4     5

  Combinations of size K = 3

     1     2     3
     1     2     4
     1     2     5
     1     3     4
     1     3     5
     1     4     5
     2     3     4
     2     3     5
     2     4     5
     3     4     5

  Combinations of size K = 4

     1     2     3     4
     1     2     3     5
     1     2     4     5
     1     3     4     5
     2     3     4     5

  Combinations of size K = 5

     1     2     3     4     5

TEST012
  COMB_ROW computes a row of the Pascal triangle.

   0      1
   1      1    1
   2      1    2    1
   3      1    3    3    1
   4      1    4    6    4    1
   5      1    5   10   10    5    1
   6      1    6   15   20   15    6    1
   7      1    7   21   35   35   21    7    1
   8      1    8   28   56   70   56   28    8    1
   9      1    9   36   84  126  126   84   36    9    1
  10      1   10   45  120  210  252  210  120   45   10    1

TEST0322
  I4_BCLR sets a given bit to 0.

  Working on I4 = 101

       Pos     Digit       I4_BCLR

         0         0       100
         1         0       101
         2         0        97
         3         0       101
         4         0       101
         5         0        69
         6         0        37
         7         0       101
         8         0       101
         9         0       101
        10         0       101
        11         0       101
        12         0       101
        13         0       101
        14         0       101
        15         0       101
        16         0       101
        17         0       101
        18         0       101
        19         0       101
        20         0       101
        21         0       101
        22         0       101
        23         0       101
        24         0       101
        25         1       101
        26         1       101
        27         0       101
        28         0       101
        29         1       101
        30         0       101
        31         1       101

  Working on I4 = -31

       Pos     Digit       I4_BCLR

         0         1       -32
         1         1       -31
         2         1       -31
         3         1       -31
         4         1       -31
         5         1       -63
         6         1       -95
         7         1      -159
         8         1      -287
         9         1      -543
        10         1     -1055
        11         1     -2079
        12         1     -4127
        13         1     -8223
        14         1    -16415
        15         1    -32799
        16         1    -65567
        17         1   -131103
        18         1   -262175
        19         1   -524319
        20         1  -1048607
        21         1  -2097183
        22         1  -4194335
        23         1  -8388639
        24         1  -16777247
        25         1  -33554463
        26         1  -67108895
        27         0  -134217759
        28         0  -268435487
        29         0  -536870943
        30         0  -1073741855
        31         1  2147483617

TEST03225
  I4_BSET sets a given bit to 0.

  Working on I4 = 101

       Pos     Digit       I4_BSET

         0         0       101
         1         0       103
         2         0       101
         3         0       109
         4         0       117
         5         0       101
         6         0       101
         7         0       229
         8         0       357
         9         0       613
        10         0      1125
        11         0      2149
        12         0      4197
        13         0      8293
        14         0     16485
        15         0     32869
        16         0     65637
        17         0    131173
        18         0    262245
        19         0    524389
        20         0   1048677
        21         0   2097253
        22         0   4194405
        23         0   8388709
        24         0  16777317
        25         1  33554533
        26         1  67108965
        27         0  134217829
        28         0  268435557
        29         1  536871013
        30         0  1073741925
        31         1  -2147483547

  Working on I4 = -31

       Pos     Digit       I4_BSET

         0         1       -31
         1         1       -29
         2         1       -27
         3         1       -23
         4         1       -15
         5         1       -31
         6         1       -31
         7         1       -31
         8         1       -31
         9         1       -31
        10         1       -31
        11         1       -31
        12         1       -31
        13         1       -31
        14         1       -31
        15         1       -31
        16         1       -31
        17         1       -31
        18         1       -31
        19         1       -31
        20         1       -31
        21         1       -31
        22         1       -31
        23         1       -31
        24         1       -31
        25         1       -31
        26         1       -31
        27         0       -31
        28         0       -31
        29         0       -31
        30         0       -31
        31         1       -31

TEST0323
  I4_BTEST reports whether a given bit is 0 or 1.

  Analyze the integer I4 = 101

       Pos     Digit  I4_BTEST

         0         0         1
         1         0         0
         2         0         1
         3         0         0
         4         0         0
         5         0         1
         6         0         1
         7         0         0
         8         0         0
         9         0         0
        10         0         0
        11         0         0
        12         0         0
        13         0         0
        14         0         0
        15         0         0
        16         0         0
        17         0         0
        18         0         0
        19         0         0
        20         0         0
        21         0         0
        22         0         0
        23         0         0
        24         0         0
        25         1         0
        26         1         0
        27         0         0
        28         0         0
        29         1         0
        30         0         0
        31         1         0

  Analyze the integer I4 = -31

       Pos     Digit  I4_BTEST

         0         1         1
         1         1         0
         2         1         0
         3         1         0
         4         1         0
         5         1         1
         6         1         1
         7         1         1
         8         1         1
         9         1         1
        10         1         1
        11         1         1
        12         1         1
        13         1         1
        14         1         1
        15         1         1
        16         1         1
        17         1         1
        18         1         1
        19         1         1
        20         1         1
        21         1         1
        22         1         1
        23         1         1
        24         1         1
        25         1         1
        26         1         1
        27         0         1
        28         0         1
        29         0         1
        30         0         1
        31         1         1

TEST06225
  I4_PARTITIONS_NEXT produces the next
  nondecreasing partitions of an integer, and
  if necessary, increments the integer to keep on going.

   I Sum    Partition

   0   0     0 0 0
   1   1     1 0 0
   2   2     2 0 0
   3   2     1 1 0
   4   3     3 0 0
   5   3     2 1 0
   6   3     1 1 1
   7   4     4 0 0
   8   4     3 1 0
   9   4     2 2 0
  10   4     2 1 1
  11   5     5 0 0
  12   5     4 1 0
  13   5     3 2 0
  14   5     3 1 1
  15   5     2 2 1

  You can start from any legal partition.
  Here, we restart at ( 2, 1, 0 ).

   I Sum    Partition

   0   3     2 1 0
   1   3     1 1 1
   2   4     4 0 0
   3   4     3 1 0
   4   4     2 2 0
   5   4     2 1 1
   6   5     5 0 0
   7   5     4 1 0
   8   5     3 2 0
   9   5     3 1 1
  10   5     2 2 1
  11   6     6 0 0
  12   6     5 1 0
  13   6     4 2 0
  14   6     3 3 0
  15   6     4 1 1

TEST06895
  INVERSE_MOD_N seeks Y, the inverse of B mod N,
  so that mod ( B * Y, N ) = 1, but returns 0
  if the inverse does not exist.

     B     N     Y     Z = ( ( B * Y ) % N )

     1     2     1     1
     1     3     1     1
     2     3     2     1
     1     4     1     1
     2     4     0     0
     3     4     3     1
     1     5     1     1
     2     5     3     1
     3     5     2     1
     4     5     4     1
     1     6     1     1
     2     6     0     0
     3     6     0     0
     4     6     0     0
     5     6     5     1
     1     7     1     1
     2     7     4     1
     3     7     5     1
     4     7     2     1
     5     7     3     1
     6     7     6     1
     1     8     1     1
     2     8     0     0
     3     8     3     1
     4     8     0     0
     5     8     5     1
     6     8     0     0
     7     8     7     1
     1     9     1     1
     2     9     5     1
     3     9     0     0
     4     9     7     1
     5     9     2     1
     6     9     0     0
     7     9     4     1
     8     9     8     1
     1    10     1     1
     2    10     0     0
     3    10     7     1
     4    10     0     0
     5    10     0     0
     6    10     0     0
     7    10     3     1
     8    10     0     0
     9    10     9     1

TEST069
  RFRAC_TO_JFRAC converts a rational polynomial
  fraction to a J fraction.
  JFRAC_TO_RFRAC converts a J fraction
  to a rational polynomial fraction.

  The original rational polynomial coefficients:

      0.218418        0.956318        0.829509        0.561695        0.415307        0.066119  
      0.641848        0.273997        0.109216        1.579755        0.153816        1.120189        1.000000  

  The J fraction coefficients:

      0.066119       24.076263       -0.310636        1.402759        5.167888       -0.068613  
     -5.161042        4.915639       -0.945630       -1.040013        2.918884        0.432351  

  The recovered rational polynomial:

      0.218418        0.956318        0.829509        0.561695        0.415307        0.066119  
      0.641848        0.273997        0.109216        1.579755        0.153816        1.120189        1.000000  

TEST07715
  KSUB_RANDOM5 generates a random K subset of an N set.
  Set size is N =    52
  Subset size is K = 5

   12   24   31   44   50
    4    6    8   15   35
    4   23   24   40   43
    1    5    8   20   47
    4    9   17   44   45

TEST0955
  PERM_INVERSE3_NEW inverts a permutation.

  The original permutation:

     0   1   2   3   4   5   6
     3   2   4   0   6   5   1

  The inverted permutation:

     0   1   2   3   4   5   6
     3   6   1   0   2   5   4

TEST097
  PERM_LEX_NEXT generates permutations in order.
  PERM_SIGN computes the sign of a permutation.

  RANK  SIGN  Permutation

   0     1     1     2     3     4
   1    -1     1     2     4     3
   2    -1     1     3     2     4
   3     1     1     3     4     2
   4     1     1     4     2     3
   5    -1     1     4     3     2
   6    -1     2     1     3     4
   7     1     2     1     4     3
   8     1     2     3     1     4
   9    -1     2     3     4     1
  10    -1     2     4     1     3
  11     1     2     4     3     1
  12     1     3     1     2     4
  13    -1     3     1     4     2
  14    -1     3     2     1     4
  15     1     3     2     4     1
  16     1     3     4     1     2
  17    -1     3     4     2     1
  18    -1     4     1     2     3
  19     1     4     1     3     2
  20     1     4     2     1     3
  21    -1     4     2     3     1
  22    -1     4     3     1     2
  23     1     4     3     2     1

TEST15696
  VECTOR_CONSTRAINED_NEXT7:
  Consider vectors:
    0 <= X(1:N) <= X_MAX(1:N),
  Set
    TOTAL = sum ( ALPHA(1:N) * X(1:N) )
  Accept only vectors for which:
    Q_MIN <= TOTAL <= Q_MAX

  ALPHA:  4.000000  3.000000
  Q_MIN:  16.000000
  Q_MAX:  20.000000
  X_MAX:     2     6

         1       18.000000         0         6
         2       19.000000         1         5
         3       17.000000         2         3
         4       20.000000         2         4

  ALPHA:  4.000000  3.000000  5.000000
  Q_MIN:  16.000000
  Q_MAX:  20.000000
  X_MAX:     2     6     4

         1       20.000000         0         0         4
         2       18.000000         0         1         3
         3       19.000000         0         3         2
         4       17.000000         0         4         1
         5       20.000000         0         5         1
         6       18.000000         0         6         0
         7       19.000000         1         0         3
         8       17.000000         1         1         2
         9       20.000000         1         2         2
        10       18.000000         1         3         1
        11       19.000000         1         5         0
        12       18.000000         2         0         2
        13       19.000000         2         2         1
        14       17.000000         2         3         0
        15       20.000000         2         4         0

TEST15698
  VECTOR_NEXT:
  Generate all vectors X such that:
    X_MIN(1:N) <= X(1:N) <= X_MAX(1:N),

    X_MIN:         1         4
         1         1         4
         2         2         4
         3         1         5
         4         2         5
         5         1         6
         6         2         6
    X_MAX:         2         6

    X_MIN:         1         4         3
         1         1         4         3
         2         2         4         3
         3         1         5         3
         4         2         5         3
         5         1         6         3
         6         2         6         3
         7         1         4         4
         8         2         4         4
         9         1         5         4
        10         2         5         4
        11         1         6         4
        12         2         6         4
    X_MAX:         2         6         4

SUBSET_PRB
  Normal end of execution.

14 November 2012 11:21:25 AM
