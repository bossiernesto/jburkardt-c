19 October 2012 10:34:27 PM

R8LIB_PRB
  C version
  Test the R8LIB library.

TEST001
  R8_ABS returns the absolute value of an R8.

      X         R8_ABS(X)

   -1.252654    1.252654
    4.650541    4.650541
    3.636074    3.636074
    1.493564    1.493564
    0.322457    0.322457
   -2.471050    2.471050
   -0.939378    0.939378
   -2.120346    2.120346
   -2.649368    2.649368
    2.071726    2.071726

TEST002
  R8_ATAN computes the arc-tangent given Y and X;
  ATAN2 is the system version of this routine.

       X             Y          ATAN2(Y,X)    R8_ATAN(Y,X)

        1.000000        0.000000        0.000000        0.000000
        1.000000        1.000000        0.785398        0.785398
        0.000000        1.000000        1.570796        1.570796
       -1.000000        1.000000        2.356194        2.356194
       -1.000000        0.000000        3.141593        3.141593
       -1.000000       -1.000000       -2.356194        3.926991
        0.000000       -1.000000       -1.570796        4.712389
        1.000000       -1.000000       -0.785398        5.497787

TEST003
  R8_CAS evaluates the casine of a number.

        X           R8_CAS ( X )

        0.000000        1.000000
        0.261799        1.224745
        0.523599        1.366025
        0.785398        1.414214
        1.047198        1.366025
        1.308997        1.224745
        1.570796        1.000000
        1.832596        0.707107
        2.094395        0.366025
        2.356194        0.000000
        2.617994       -0.366025
        2.879793       -0.707107
        3.141593       -1.000000

TEST004
  R8_CEILING rounds a value up.

       -1.200000       -1.000000
       -1.000000       -1.000000
       -0.800000        0.000000
       -0.600000        0.000000
       -0.400000        0.000000
       -0.200000        0.000000
        0.000000        0.000000
        0.200000        1.000000
        0.400000        1.000000
        0.600000        1.000000
        0.800000        1.000000
        1.000000        1.000000
        1.200000        2.000000

TEST005
  R8_DIFF computes a difference X-Y to a given
    number of binary places.

  For this test, we use 3 binary places.

       X       Y       X-Y     R8_DIFF(X,Y)

    1.000000    0.062500    0.937500    0.875000
    1.000000    0.125000    0.875000    0.875000
    1.000000    0.250000    0.750000    0.750000
    1.000000    0.500000    0.500000    0.500000
    1.000000    0.874000    0.126000    0.125000
    1.000000    0.876000    0.124000    0.125000
    1.000000    0.900000    0.100000    0.125000
    1.000000    0.950000    0.050000    0.000000
    1.000000    0.990000    0.010000    0.000000
    1.000000    1.000000    0.000000    0.000000
    1.000000    1.010000   -0.010000    0.000000
    1.000000    1.050000   -0.050000    0.000000
    1.000000    1.100000   -0.100000   -0.137500
    1.000000    3.000000   -2.000000   -1.875000
    1.000000   10.000000   -9.000000   -8.750000

TEST006
  R8_DIGIT extracts decimal digits.

  Here, we get digits of       3.1415926535897931

   -2 -1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
    0  0  0  3  1  4  1  5  9  2  6  5  3  5  8  9  7  9  3  1  1  5  9

TEST007
  R8_EPSILON produces the R8 roundoff unit.
  R8_EPSILON_COMPUTE computes the R8 roundoff unit.

  R1 = R8_EPSILON()         =   2.2204460492503131e-16
  R2 = R8_EPSILON_COMPUTE() =   2.2204460492503131e-16
  ( 1 + R2 ) - 1            =   2.2204460492503131e-16
  ( 1 + (R2/2) ) - 1        =   0.000000e+00

TEST008
  R8_FRACTIONAL returns the fractional part of an R8.

   -1.252654    0.252654
    4.650541    0.650541
    3.636074    0.636074
    1.493564    0.493564
    0.322457    0.322457
   -2.471050    0.471050
   -0.939378    0.939378
   -2.120346    0.120346
   -2.649368    0.649368
    2.071726    0.071726

TEST009
  R8_HUGE returns a large R8 value;

  R8_HUGE =   1.000000e+30

TEST010
  R8_LOG_2: computes the logarithm base 2.

  X       R8_LOG_2

      0.000000  -1000000000000000019884624838656.000000
      1.000000      0.000000
      2.000000      1.000000
      3.000000      1.584963
      9.000000      3.169925
     10.000000      3.321928
     11.000000      3.459432
     99.000000      6.629357
    101.000000      6.658211
     -1.000000      0.000000
     -2.000000      1.000000
     -3.000000      1.584963
     -9.000000      3.169925
      0.500000     -1.000000
      0.330000     -1.599462
      0.250000     -2.000000
      0.200000     -2.321928
      0.010000     -6.643856

TEST011
  R8_LOG_B computes the logarithm base B.

  X, B, R8_LOG_B

     16.000000      2.000000      4.000000
     16.000000      3.000000      2.523719
     16.000000      4.000000      2.000000
     16.000000      5.000000      1.722706
     16.000000      6.000000      1.547411
     16.000000      7.000000      1.424829
     16.000000      8.000000      1.333333
     16.000000     16.000000      1.000000
     16.000000     32.000000      0.800000
     16.000000    256.000000      0.500000

TEST012
  R8_MANT decomposes a value.

  Number to be decomposed: X = -314.159000

  X = -1 * 1.227184 * 2 ^ 8

TEST013
  R8_MOD returns the remainder after division.
  R8_MOD ( X, Y ) has the same sign as X.

      X         Y    FMOD(X,Y)    R8_MOD(X,Y)

     -5.631634      9.126352     -5.631634     -5.631634
      6.590185      1.233909      0.420640      0.420640
     -1.693858     -8.677625     -1.693858     -1.693858
     -4.848444     -7.800864     -4.848444     -4.848444
     -9.123420      2.679314     -1.085477     -1.085477
     -8.765455     -1.009221     -0.691689     -0.691689
     -1.973874      5.093470     -1.973874     -1.973874
      5.945739     -9.963233      5.945739      5.945739
      7.950081     -2.984953      1.980175      1.980175
     -8.109105     -9.727662     -8.109105     -8.109105

TEST014
  R8_MODP returns the remainder after division.
  R8_MODP ( X, Y ) is positive if Y is.

      X             FMOD(x,1.0)  R8_MODP(x,1.0)

     -0.431634     -0.431634      0.568366
     14.326352      0.326352      0.326352
     11.790185      0.790185      0.790185
      6.433909      0.433909      0.433909
      3.506142      0.506142      0.506142
     -3.477625     -0.477625      0.522375
      0.351556      0.351556      0.351556
     -2.600864     -0.600864      0.399136
     -3.923420     -0.923420      0.076580
      7.879314      0.879314      0.879314
     -3.565455     -0.565455      0.434545
      4.190779      0.190779      0.190779
      3.226126      0.226126      0.226126
     10.293470      0.293470      0.293470
     11.145739      0.145739      0.145739
     -4.763233     -0.763233      0.236767
     13.150081      0.150081      0.150081
      2.215047      0.215047      0.215047
     -2.909105     -0.909105      0.090895
     -4.527662     -0.527662      0.472338

TEST015
  R8_NINT produces the nearest integer.

    -5.631634      -6
     9.126352       9
     6.590185       7
     1.233909       1
    -1.693858      -2
    -8.677625      -9
    -4.848444      -5
    -7.800864      -8
    -9.123420      -9
     2.679314       3

TEST016
  R8_NORMAL_01 generates normally distributed random values.
  Using initial random number seed = 123456789

    1.679040
   -0.472769
   -0.566060
   -0.231124
    1.212934
    0.535037
    1.269381
    1.049543
   -1.666087
   -1.865228
   -2.242464
    0.735809
    0.039675
   -1.350736
    0.673068
    0.007775
   -0.275127
    0.374940
    2.164005
    0.185600

TEST017
  R8_PI returns the value of PI.

  R8_PI =           3.1415926535897931
  4*atan(1) =       3.1415926535897931

TEST018
  R8_POWER computes R^P

      R          P       R^P

      2.000000      -5      0.031250
      2.000000      -4      0.062500
      2.000000      -3      0.125000
      2.000000      -2      0.250000
      2.000000      -1      0.500000
      2.000000       0      1.000000
      2.000000       1      2.000000
      2.000000       2      4.000000
      2.000000       3      8.000000
      2.000000       4     16.000000
      2.000000       5     32.000000

TEST019
  R8_POWER_FAST computes R^P, economizing on
    multiplications.

      R          P       R^P        Mults

      2.000000     -10   0.000976562       7
      2.000000      -9    0.00195312       7
      2.000000      -8    0.00390625       6
      2.000000      -7     0.0078125       7
      2.000000      -6      0.015625       6
      2.000000      -5       0.03125       6
      2.000000      -4        0.0625       5
      2.000000      -3         0.125       5
      2.000000      -2          0.25       4
      2.000000      -1           0.5       1
      2.000000       0             1       0
      2.000000       1             2       0
      2.000000       2             4       3
      2.000000       3             8       4
      2.000000       4            16       4
      2.000000       5            32       5
      2.000000       6            64       5
      2.000000       7           128       6
      2.000000       8           256       5
      2.000000       9           512       6
      2.000000      10          1024       6
      2.000000      11          2048       7
      2.000000      12          4096       6
      2.000000      13          8192       7
      2.000000      14         16384       7
      2.000000      15         32768       8
      2.000000      16         65536       6
      2.000000      17        131072       7
      2.000000      18        262144       7
      2.000000      19        524288       8
      2.000000      20   1.04858e+06       7
      2.000000      21   2.09715e+06       8
      2.000000      22    4.1943e+06       8
      2.000000      23   8.38861e+06       9
      2.000000      24   1.67772e+07       7
      2.000000      25   3.35544e+07       8
      2.000000      26   6.71089e+07       8
      2.000000      27   1.34218e+08       9
      2.000000      28   2.68435e+08       8
      2.000000      29   5.36871e+08       9
      2.000000      30   1.07374e+09       9
      2.000000      31   2.14748e+09      10
      2.000000      32   4.29497e+09       7
      2.000000      33   8.58993e+09       8
      2.000000      34   1.71799e+10       8
      2.000000      35   3.43597e+10       9
      2.000000      36   6.87195e+10       8
      2.000000      37   1.37439e+11       9
      2.000000      38   2.74878e+11       9
      2.000000      39   5.49756e+11      10
      2.000000      40   1.09951e+12       8

TEST020
  R8_ROUND2 rounds a number to a
    specified number of base 2 digits.

  Test effect on PI:
  X =       3.1415926535897931

  NPLACE  XROUND

         0        0.0000000000000000
         1        2.0000000000000000
         2        3.0000000000000000
         3        3.0000000000000000
         4        3.0000000000000000
         5        3.1250000000000000
         6        3.1250000000000000
         7        3.1250000000000000
         8        3.1406250000000000
         9        3.1406250000000000
        10        3.1406250000000000
        11        3.1406250000000000
        12        3.1406250000000000
        13        3.1411132812500000
        14        3.1413574218750000
        15        3.1414794921875000
        16        3.1415405273437500
        17        3.1415710449218750
        18        3.1415863037109375
        19        3.1415863037109375
        20        3.1415901184082031

TEST021
  R8_ROUNDB rounds a number to a 
  specified number of base BASE digits.

  Here, we will use BASE =  3

  Test effect on PI:
  X =       3.1415926535897931

  NPLACE  XROUND

         0        0.0000000000000000
         1        3.0000000000000000
         2        3.0000000000000000
         3        3.0000000000000000
         4        3.1111111111111107
         5        3.1111111111111107
         6        3.1358024691358022
         7        3.1399176954732515
         8        3.1412894375857339
         9        3.1412894375857339
        10        3.1414418533760098
        11        3.1415434639028601
        12        3.1415773340784772
        13        3.1415886241370159
        14        3.1415923874898626
        15        3.1415923874898626
        16        3.1415925965650207
        17        3.1415925965650207
        18        3.1415926430261667
        19        3.1415926507696912
        20        3.1415926533508660

  Try with a negative base:

  Input quantity is X =     121.0000000000000000
  to be rounded in base -3

  Output value to 1 places is 81.000000

  Output value to 2 places is 108.000000

  Output value to 3 places is 117.000000

  Output value to 4 places is 120.000000

  Output value to 5 places is 121.000000

TEST022
  R8_ROUNDX rounds a number to a 
  specified number of decimal digits.

  Test effect on PI:
  X = 3.141593

  NPLACE  XROUND

       0        0.000000000000
       1        3.000000000000
       2        3.100000000000
       3        3.140000000000
       4        3.141000000000
       5        3.141500000000
       6        3.141590000000
       7        3.141592000000
       8        3.141592600000
       9        3.141592650000
      10        3.141592653000

  Test effect on random values:

  NPLACE  X     XROUND


       0          0.218418              0.000000
       2          0.218418              0.210000
       4          0.218418              0.218400
       6          0.218418              0.218418
       8          0.218418              0.218418
      10          0.218418              0.218418

       0          0.956318              0.000000
       2          0.956318              0.950000
       4          0.956318              0.956300
       6          0.956318              0.956317
       8          0.956318              0.956318
      10          0.956318              0.956318

       0          0.829509              0.000000
       2          0.829509              0.820000
       4          0.829509              0.829500
       6          0.829509              0.829509
       8          0.829509              0.829509
      10          0.829509              0.829509

       0          0.561695              0.000000
       2          0.561695              0.560000
       4          0.561695              0.561600
       6          0.561695              0.561695
       8          0.561695              0.561695
      10          0.561695              0.561695

       0          0.415307              0.000000
       2          0.415307              0.410000
       4          0.415307              0.415300
       6          0.415307              0.415307
       8          0.415307              0.415307
      10          0.415307              0.415307

TEST023
  R8_SIGN returns the sign of a number.

  -1.250000  -1.000000
  -0.250000  -1.000000
  0.000000  1.000000
  0.500000  1.000000
  9.000000  1.000000

TEST0235
  R8_SWAP swaps two reals.

  Before swapping: 

    X = 1.000000
    Y = 3.141590

  After swapping: 

    X = 3.141590
    Y = 1.000000

TEST024
  R8_TO_R8_DISCRETE maps numbers to a discrete set
  of equally spaced numbers in an interval.

  Number of discrete values = 19
  Real interval: [1.000000, 10.000000]

  R   RD

        1.839438        1.947368
       11.432128       10.000000
        9.783620       10.000000
        6.302041        6.210526
        4.398992        4.315789
       -0.140456        1.000000
        2.348511        2.421053
        0.429438        1.000000
       -0.430223        1.000000
        7.241554        7.157895
       -0.197546        1.000000
        4.844006        4.789474
        4.216982        4.315789
        8.810755        8.578947
        9.364730        9.526316

TEST025
  R8_TO_I4 finds an integer IX in [IXMIN,IXMAX]
  corresponding to X in [XMIN,XMAX].

   XMIN 2.500000,   X = 3.500000,  XMAX = 5.500000
  IXMIN 10,  IX = 20, IXMAX = 40

TEST026
  R8_UNIFORM produces a random real in a given range.

  Using range 10.000000 <= A <= 25.000000.


  I   A

     0   10.001996
     1   13.542136
     2   22.679357
     3   21.955784
     4   10.855646
     5   20.834593
     6   21.996377
     7   18.110503
     8   18.220583
     9   23.346688

TEST027
  R8_UNIFORM_01 produces a sequence of random values.

  Using random seed 123456789.

  SEED   R8_UNIFORM_01(SEED)

   123456789  0.218418
   469049721  0.956318
  2053676357  0.829509
  1781357515  0.561695
  1206231778  0.415307
   891865166  0.066119
   141988902  0.257578
   553144097  0.109957
   236130416  0.043829
    94122056  0.633966

  Verify that the sequence can be restarted.
  Set the seed back to its original value, and see that
  we generate the same sequence.

  SEED   R8_UNIFORM_01(SEED)

   123456789  0.218418
   469049721  0.956318
  2053676357  0.829509
  1781357515  0.561695
  1206231778  0.415307
   891865166  0.066119
   141988902  0.257578
   553144097  0.109957
   236130416  0.043829
    94122056  0.633966

TEST028
  R8_UNIFORM_01 samples a uniform random distribution in [0,1].
  distributed random numbers.
  Using initial random number seed = 123456789

  First few values:

       0        0.218418
       1        0.956318
       2        0.829509
       3        0.561695
       4        0.415307
       5        0.066119
       6        0.257578
       7        0.109957
       8        0.043829
       9        0.633966

  Number of samples was 1000
  Minimum value was 0.001838
  Maximum value was 0.997908
  Average value was 0.503040
  Variance was      0.082332

TEST029
  R8_WALSH_1D evaluates 1D Walsh functions:

  X  W(+2) W(+1) W(0) W(-1) W(-2) W(-3)

           0   0   0   0   0   0   0
        0.25   0   0   0   0   1   0
         0.5   0   0   0   1   0   0
        0.75   0   0   0   1   1   0
           1   0   0   1   0   0   0
        1.25   0   0   1   0   1   0
         1.5   0   0   1   1   0   0
        1.75   0   0   1   1   1   0
           2   0   1   0   0   0   0
        2.25   0   1   0   0   1   0
         2.5   0   1   0   1   0   0
        2.75   0   1   0   1   1   0
           3   0   1   1   0   0   0
        3.25   0   1   1   0   1   0
         3.5   0   1   1   1   0   0
        3.75   0   1   1   1   1   0
           4   1   0   0   0   0   0
        4.25   1   0   0   0   1   0
         4.5   1   0   0   1   0   0
        4.75   1   0   0   1   1   0
           5   1   0   1   0   0   0
        5.25   1   0   1   0   1   0
         5.5   1   0   1   1   0   0
        5.75   1   0   1   1   1   0
           6   1   1   0   0   0   0
        6.25   1   1   0   0   1   0
         6.5   1   1   0   1   0   0
        6.75   1   1   0   1   1   0
           7   1   1   1   0   0   0
        7.25   1   1   1   0   1   0
         7.5   1   1   1   1   0   0
        7.75   1   1   1   1   1   0
           8   0   0   0   0   0   0

TEST0295
  R8_WRAP "wraps" an R8 to lie within an interval:

  Wrapping interval is 3, 6.5

      R      R8_WRAP ( R )

         1.05786         4.55786
         11.3884         4.38845
         9.61313         6.11313
         5.86374         5.86374
          3.8143          3.8143
        -1.07434         5.92566
         1.60609         5.10609
       -0.460605          3.0394
        -1.38639         5.61361
         6.87552         3.37552
        -1.13582         5.86418
         4.29355         4.29355
         3.61829         3.61829
         8.56543         5.06543
         9.16202         5.66202
        -1.97426         5.02574
         10.5651         3.56506
         2.91053         6.41053
       -0.676373         6.32363
        -1.80936         5.19064

TEST031
  R82POLY2_TYPE determines the type of a second order
  equation in two variables.


  9 * x^2 + -4 * y^2 + 0 * xy +
  -36 * x + -24 * y + -36
  Type = 1
  The set of solutions forms a hyperbola.

  4 * x^2 + 1 * y^2 + -4 * xy +
  3 * x + -4 * y + 1
  Type = 2
  The set of solutions forms a parabola.

  9 * x^2 + 16 * y^2 + 0 * xy +
  36 * x + -32 * y + -92
  Type = 3
  The set of solutions forms an ellipse.

  1 * x^2 + 1 * y^2 + 0 * xy +
  -6 * x + -10 * y + 115
  Type = 4
  The set of solutions forms an imaginary ellipse.
  (There are no real solutions).

  0 * x^2 + 0 * y^2 + 1 * xy +
  3 * x + -1 * y + -3
  Type = 5
  The set of solutions forms a pair of intersecting lines.

  1 * x^2 + 2 * y^2 + 0 * xy +
  -2 * x + 16 * y + 33
  Type = 6
  The set of solutions is a single point.

  0 * x^2 + 1 * y^2 + 0 * xy +
  0 * x + -6 * y + 8
  Type = 7
  The set of solutions form a pair of distinct parallel lines.

  0 * x^2 + 1 * y^2 + 0 * xy +
  0 * x + -6 * y + 10
  Type = 8
  The set of solutions forms a pair of imaginary parallel lines.
  (There are no real solutions).

  0 * x^2 + 1 * y^2 + 0 * xy +
  0 * x + -2 * y + 1
  Type = 9
  The set of solutions forms a pair of coincident lines.

  0 * x^2 + 0 * y^2 + 0 * xy +
  2 * x + -1 * y + 1
  Type = 10
  The set of solutions forms a single line.

  0 * x^2 + 0 * y^2 + 0 * xy +
  0 * x + 0 * y + 0
  Type = 11
  The set of solutions is all space.

  0 * x^2 + 0 * y^2 + 0 * xy +
  0 * x + 0 * y + 1
  Type = 12
  The set of solutions is empty.

TEST032
  R82VEC_ORDER_TYPE classifies an R8VEC as
  -1: no order
   0: all equal;
   1: ascending;
   2: strictly ascending;
   3: descending;
   4: strictly descending.

  Order type = -1

 

         0:       1.000000        3.000000
         1:       2.000000        2.000000
         2:       1.000000        0.000000
         3:       1.000000        0.000000
  Order type = -1

 

         0:       0.000000        2.000000
         1:       0.000000        1.000000
         2:       1.000000        2.000000
         3:       2.000000        0.000000
  Order type = -1

 

         0:       3.000000        1.000000
         1:       0.000000        0.000000
         2:       3.000000        3.000000
         3:       0.000000        0.000000
  Order type = -1

 

         0:       1.000000        3.000000
         1:       0.000000        1.000000
         2:       2.000000        1.000000
         3:       2.000000        2.000000
  Order type = -1

 

         0:       3.000000        1.000000
         1:       3.000000        2.000000
         2:       1.000000        2.000000
         3:       1.000000        1.000000
  Order type = 4

 

         0:       2.000000        1.000000
         1:       2.000000        1.000000
         2:       1.000000        2.000000
         3:       0.000000        1.000000
  Order type = -1

 

         0:       2.000000        2.000000
         1:       0.000000        2.000000
         2:       0.000000        2.000000
         3:       2.000000        1.000000
  Order type = -1

 

         0:       3.000000        2.000000
         1:       2.000000        1.000000
         2:       3.000000        2.000000
         3:       0.000000        2.000000
  Order type = -1

 

         0:       0.000000        1.000000
         1:       1.000000        3.000000
         2:       0.000000        0.000000
         3:       0.000000        0.000000
  Order type = -1

 

         0:       1.000000        0.000000
         1:       1.000000        1.000000
         2:       2.000000        2.000000
         3:       2.000000        1.000000

TEST033
  R82VEC_PART_QUICK_A reorders an R82VEC
  as part of a quick sort.
  Using initial random number seed = 123456789

  Before rearrangment:

         0:       0.436837        1.912635
         1:       1.659018        1.123391
         2:       0.830614        0.132237
         3:       0.515156        0.219914
         4:       0.087658        1.267931
         5:       0.123454        0.899078
         6:       0.802613        1.509347
         7:       1.594574        0.003677
         8:       1.795008        0.701505
         9:       0.189090        0.027234
        10:       1.718194        1.681695
        11:       0.246208        0.015025

  Rearranged array
  Left index =  4
  Key index =   5
  Right index = 6

  Left half:

         0:       0.246208        0.015025
         1:       0.189090        0.027234
         2:       0.123454        0.899078
         3:       0.087658        1.267931

  Key:

         0:       0.436837        1.912635

  Right half:

         0:       0.802613        1.509347
         1:       1.594574        0.003677
         2:       1.795008        0.701505
         3:       0.515156        0.219914
         4:       1.718194        1.681695
         5:       0.830614        0.132237
         6:       1.659018        1.123391

TEST034
  R82VEC_SORT_HEAP_INDEX_A index sorts an R82VEC
  using heapsort.
  Using initial random number seed = 123456789

  Before rearrangement:

         0:       2.184183        9.563176
         1:       8.295092        3.507523
         2:       0.438290        0.661187
         3:       1.231039        1.099568
         4:       0.438290        6.339657
         5:       0.617272        9.563176
         6:       8.590969        8.408475
         7:       7.972870        0.018384
         8:       8.975041        3.507523
         9:       0.945448        0.136169
        10:       8.590969        8.408475
        11:       1.231039        0.075124

         I     Index   A(Index)

         0         2      0.438290      0.661187
         1         4      0.438290      6.339657
         2         5      0.617272      9.563176
         3         9      0.945448      0.136169
         4        11      1.231039      0.075124
         5         3      1.231039      1.099568
         6         0      2.184183      9.563176
         7         7      7.972870      0.018384
         8         1      8.295092      3.507523
         9         6      8.590969      8.408475
        10        10      8.590969      8.408475
        11         8      8.975041      3.507523

  After rearrangement by R82VEC_PERMUTE:

         0:       0.438290        0.661187
         1:       0.438290        6.339657
         2:       0.617272        9.563176
         3:       0.945448        0.136169
         4:       1.231039        0.075124
         5:       1.231039        1.099568
         6:       2.184183        9.563176
         7:       7.972870        0.018384
         8:       8.295092        3.507523
         9:       8.590969        8.408475
        10:       8.590969        8.408475
        11:       8.975041        3.507523

TEST035
  R82VEC_SORT_QUICK_A sorts an R82VEC
  as part of a quick sort.
  Using initial random number seed = 123456789

  Before sorting:

         0:       2.184183        9.563176
         1:       8.295092        5.616954
         2:       0.438290        0.661187
         3:       1.231039        1.099568
         4:       0.438290        6.339657
         5:       0.617272        4.495390
         6:       8.590969        8.408475
         7:       7.972870        0.018384
         8:       8.975041        3.507523
         9:       0.945448        0.136169
        10:       8.590969        8.408475
        11:       1.231039        0.075124

  Sorted array:

         0:       0.438290        0.661187
         1:       0.438290        6.339657
         2:       0.617272        4.495390
         3:       0.945448        0.136169
         4:       1.231039        0.075124
         5:       1.231039        1.099568
         6:       2.184183        9.563176
         7:       7.972870        0.018384
         8:       8.295092        5.616954
         9:       8.590969        8.408475
        10:       8.590969        8.408475
        11:       8.975041        3.507523

TEST036
  R8BLOCK_EXPAND_LINEAR linearly interpolates new data
  between old values in a 3D block.

  Original block:

  K = 1


      
      1             2             3       

    1:             1             1             1
    2:             2             4             8
    3:             3             9            27
    4:             4            16            64

  K = 2


      
      1             2             3       

    1:             2             2             2
    2:             4             8            16
    3:             6            18            54
    4:             8            32           128

  LFAT = 1
  MFAT = 2
  NFAT = 1

  Fattened block:

  K = 1


      
      1             2             3             4             5       

    1:             1             1             1             1             1
    2:           1.5       1.83333       2.16667           2.5       3.16667
    3:             2       2.66667       3.33333             4       5.33333
    4:           2.5       3.83333       5.16667           6.5       10.1667
    5:             3             5             7             9            15
    6:           3.5           6.5           9.5          12.5          23.5
    7:             4             8            12            16            32

      
      6             7       

    1:             1             1
    2:       3.83333           4.5
    3:       6.66667             8
    4:       13.8333          17.5
    5:            21            27
    6:          34.5          45.5
    7:            48            64

  K = 2


      
      1             2             3             4             5       

    1:           1.5           1.5           1.5           1.5           1.5
    2:          2.25          2.75          3.25          3.75          4.75
    3:             3             4             5             6             8
    4:          3.75          5.75          7.75          9.75         15.25
    5:           4.5           7.5          10.5          13.5          22.5
    6:          5.25          9.75         14.25         18.75         35.25
    7:             6            12            18            24            48

      
      6             7       

    1:           1.5           1.5
    2:          5.75          6.75
    3:            10            12
    4:         20.75         26.25
    5:          31.5          40.5
    6:         51.75         68.25
    7:            72            96

  K = 3


      
      1             2             3             4             5       

    1:             2             2             2             2             2
    2:             3       3.66667       4.33333             5       6.33333
    3:             4       5.33333       6.66667             8       10.6667
    4:             5       7.66667       10.3333            13       20.3333
    5:             6            10            14            18            30
    6:             7            13            19            25            47
    7:             8            16            24            32            64

      
      6             7       

    1:             2             2
    2:       7.66667             9
    3:       13.3333            16
    4:       27.6667            35
    5:            42            54
    6:            69            91
    7:            96           128

TEST0363:
  R8BLOCK_NEW dynamically creates a 3D array.
  R8BLOCK_DELETE deletes it.
  Array entries can be addressed using the
  notation "a[i][j][k]".

  Allocating memory for array A of size 2 by 3 by 2.

  Assigning values to A.

  Dynamically allocated matrix A:

         0         1
        10        11
        20        21

       100       101
       110       111
       120       121


TEST0365
  R8BLOCK_PRINT prints an R8BLOCK.

  The 3D array:

  K = 1


      
      1             2             3       

    1:             1             1             1
    2:             2             4             8
    3:             3             9            27
    4:             4            16            64

  K = 2


      
      1             2             3       

    1:             2             2             2
    2:             4             8            16
    3:             6            18            54
    4:             8            32           128

TEST037
  R8COL_FIND finds a column in a table matching
  a given set of data.

  R8COL_FIND returns COL = 3

TEST038
  R8COL_SORT_HEAP_A ascending heap sorts a table of columns.
  R8COL_INSERT inserts new columns.

  The unsorted matrix:

  Col:          0             1             2             3     
  Row

    0:        2.000000        4.000000        1.000000        3.000000
    1:        6.000000        8.000000        5.000000        7.000000
    2:       10.000000       12.000000        9.000000       11.000000

  The sorted matrix:

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        3.000000        4.000000
    1:        5.000000        6.000000        7.000000        8.000000
    2:        9.000000       10.000000       11.000000       12.000000

  New column:

         0:       3.000000
         1:       7.000000
         2:      11.000000

  The data was already in column 3

  New column:

         0:       3.000000
         1:       4.000000
         2:      18.000000

  The updated matrix:

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        3.000000        3.000000
    1:        5.000000        6.000000        4.000000        7.000000
    2:        9.000000       10.000000       18.000000       11.000000

TEST0385
  R8COL_SORT_HEAP_INDEX_A computes an index vector which
  ascending sorts an R8COL.

  The unsorted R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        2.000000        6.000000       10.000000
    1:        4.000000        8.000000       12.000000
    2:        1.000000        5.000000        9.000000
    3:        3.000000        7.000000       11.000000
    4:        2.000000        6.000000        0.000000
    5:        3.000000        4.000000       18.000000
    6:        0.000000        0.000000        0.000000
    7:        0.000000        6.000000       10.000000
    8:        2.000000        6.000000       10.000000
    9:        3.000000        7.000000       11.000000
   10:        2.000000        0.000000       10.000000
   11:        2.000000        6.000000       10.000000
   12:        1.000000        5.000000        9.000000
   13:        1.000000        5.000000        9.100000
   14:        1.000000        5.100000        9.000000

  The implicitly sorted R8COL (transposed)

     6:    0.000000    0.000000    0.000000
     7:    0.000000    6.000000   10.000000
    12:    1.000000    5.000000    9.000000
     2:    1.000000    5.000000    9.000000
    13:    1.000000    5.000000    9.100000
    14:    1.000000    5.100000    9.000000
    10:    2.000000    0.000000   10.000000
     4:    2.000000    6.000000    0.000000
    11:    2.000000    6.000000   10.000000
     8:    2.000000    6.000000   10.000000
     0:    2.000000    6.000000   10.000000
     5:    3.000000    4.000000   18.000000
     9:    3.000000    7.000000   11.000000
     3:    3.000000    7.000000   11.000000
     1:    4.000000    8.000000   12.000000

TEST039
  R8COL_SORT_QUICK_A sorts a table of columns.

  The unsorted matrix:

  Col:          0             1             2             3             4     
  Row

    0:        2.184183        5.616954        2.575778        6.339657        4.013063
    1:        9.563176        4.153071        1.099568        0.617272        7.546735
    2:        8.295092        0.661187        0.438290        4.495390        7.972870

  Col:          5             6             7             8             9     
  Row

    0:        0.018384        0.945448        8.408475        2.603030        3.516287
    1:        8.975041        0.136169        1.231039        9.124837        8.228873
    2:        3.507523        8.590969        0.075124        1.136640        2.671323

  The sorted matrix:

  Col:          0             1             2             3             4     
  Row

    0:        0.018384        0.945448        2.184183        2.575778        2.603030
    1:        8.975041        0.136169        9.563176        1.099568        9.124837
    2:        3.507523        8.590969        8.295092        0.438290        1.136640

  Col:          5             6             7             8             9     
  Row

    0:        3.516287        4.013063        5.616954        6.339657        8.408475
    1:        8.228873        7.546735        4.153071        0.617272        1.231039
    2:        2.671323        7.972870        0.661187        4.495390        0.075124

TEST0393
  R8COL_SORTED_TOL_UNIQUE finds tolerably unique columns 
  in a sorted R8COL.

  The unsorted R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        1.900000        0.000000       10.000000
    1:        2.000000        6.000000       10.000000
    2:        4.000000        8.000000       12.000000
    3:        1.000000        5.000000        9.000000
    4:        3.000000        7.000000       11.000000
    5:        2.000000        6.000000        0.000000
    6:        2.000000        0.000000       10.100000
    7:        2.000000        0.100000       10.000000
    8:        3.000000        4.000000       18.000000
    9:        1.900000        8.000000       10.000000
   10:        0.000000        0.000000        0.000000
   11:        0.000000        6.000000       10.000000
   12:        2.100000        0.000000       10.000000
   13:        2.000000        6.000000       10.000000
   14:        3.000000        7.000000       11.000000
   15:        2.000000        0.000000       10.000000
   16:        2.000000        0.000000       10.000000
   17:        2.000000        6.000000       10.000000
   18:        1.000000        5.000000        9.000000
   19:        2.000000        0.000000       10.100000
   20:        1.000000        5.000000        9.100000
   21:        1.000000        5.100000        9.000000

  The sorted R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        0.000000        0.000000        0.000000
    1:        0.000000        6.000000       10.000000
    2:        1.000000        5.000000        9.000000
    3:        1.000000        5.000000        9.000000
    4:        1.000000        5.000000        9.100000
    5:        1.000000        5.100000        9.000000
    6:        1.900000        0.000000       10.000000
    7:        1.900000        8.000000       10.000000
    8:        2.000000        0.000000       10.000000
    9:        2.000000        0.000000       10.000000
   10:        2.000000        0.000000       10.100000
   11:        2.000000        0.000000       10.100000
   12:        2.000000        0.100000       10.000000
   13:        2.000000        6.000000        0.000000
   14:        2.000000        6.000000       10.000000
   15:        2.000000        6.000000       10.000000
   16:        2.000000        6.000000       10.000000
   17:        2.100000        0.000000       10.000000
   18:        3.000000        4.000000       18.000000
   19:        3.000000        7.000000       11.000000
   20:        3.000000        7.000000       11.000000
   21:        4.000000        8.000000       12.000000

  Using tolerance = 0.25

  Number of tolerably unique columns is 10

  The sorted tolerably unique R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        0.000000        0.000000        0.000000
    1:        0.000000        6.000000       10.000000
    2:        1.000000        5.000000        9.000000
    3:        1.900000        0.000000       10.000000
    4:        1.900000        8.000000       10.000000
    5:        2.000000        6.000000        0.000000
    6:        2.000000        6.000000       10.000000
    7:        3.000000        4.000000       18.000000
    8:        3.000000        7.000000       11.000000
    9:        4.000000        8.000000       12.000000

TEST0395
  R8COL_SORTED_UNIQUE_COUNT counts tolerably unique columns 
  in a sorted R8COL.

  The unsorted R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        1.900000        0.000000       10.000000
    1:        2.000000        6.000000       10.000000
    2:        4.000000        8.000000       12.000000
    3:        1.000000        5.000000        9.000000
    4:        3.000000        7.000000       11.000000
    5:        2.000000        6.000000        0.000000
    6:        2.000000        0.000000       10.100000
    7:        2.000000        0.100000       10.000000
    8:        3.000000        4.000000       18.000000
    9:        1.900000        8.000000       10.000000
   10:        0.000000        0.000000        0.000000
   11:        0.000000        6.000000       10.000000
   12:        2.100000        0.000000       10.000000
   13:        2.000000        6.000000       10.000000
   14:        3.000000        7.000000       11.000000
   15:        2.000000        0.000000       10.000000
   16:        2.000000        0.000000       10.000000
   17:        2.000000        6.000000       10.000000
   18:        1.000000        5.000000        9.000000
   19:        2.000000        0.000000       10.100000
   20:        1.000000        5.000000        9.100000
   21:        1.000000        5.100000        9.000000

  The sorted R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        0.000000        0.000000        0.000000
    1:        0.000000        6.000000       10.000000
    2:        1.000000        5.000000        9.000000
    3:        1.000000        5.000000        9.000000
    4:        1.000000        5.000000        9.100000
    5:        1.000000        5.100000        9.000000
    6:        1.900000        0.000000       10.000000
    7:        1.900000        8.000000       10.000000
    8:        2.000000        0.000000       10.000000
    9:        2.000000        0.000000       10.000000
   10:        2.000000        0.000000       10.100000
   11:        2.000000        0.000000       10.100000
   12:        2.000000        0.100000       10.000000
   13:        2.000000        6.000000        0.000000
   14:        2.000000        6.000000       10.000000
   15:        2.000000        6.000000       10.000000
   16:        2.000000        6.000000       10.000000
   17:        2.100000        0.000000       10.000000
   18:        3.000000        4.000000       18.000000
   19:        3.000000        7.000000       11.000000
   20:        3.000000        7.000000       11.000000
   21:        4.000000        8.000000       12.000000

  Using tolerance = 0.25

  Number of tolerably unique columns is 10

TEST0397
  R8COL_SORTED_TOL_UNDEX produces index vectors which create a sorted
  list of the tolerably unique columns of a sorted R8COL,
  and a map from the original R8COL to the (implicit)
  R8COL of sorted tolerably unique elements.

  The unsorted R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        1.900000        0.000000       10.000000
    1:        2.000000        6.000000       10.000000
    2:        4.000000        8.000000       12.000000
    3:        1.000000        5.000000        9.000000
    4:        3.000000        7.000000       11.000000
    5:        2.000000        6.000000        0.000000
    6:        2.000000        0.000000       10.100000
    7:        2.000000        0.100000       10.000000
    8:        3.000000        4.000000       18.000000
    9:        1.900000        8.000000       10.000000
   10:        0.000000        0.000000        0.000000
   11:        0.000000        6.000000       10.000000
   12:        2.100000        0.000000       10.000000
   13:        2.000000        6.000000       10.000000
   14:        3.000000        7.000000       11.000000
   15:        2.000000        0.000000       10.000000
   16:        2.000000        0.000000       10.000000
   17:        2.000000        6.000000       10.000000
   18:        1.000000        5.000000        9.000000
   19:        2.000000        0.000000       10.100000
   20:        1.000000        5.000000        9.100000
   21:        1.000000        5.100000        9.000000

  The sorted R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        0.000000        0.000000        0.000000
    1:        0.000000        6.000000       10.000000
    2:        1.000000        5.000000        9.000000
    3:        1.000000        5.000000        9.000000
    4:        1.000000        5.000000        9.100000
    5:        1.000000        5.100000        9.000000
    6:        1.900000        0.000000       10.000000
    7:        1.900000        8.000000       10.000000
    8:        2.000000        0.000000       10.000000
    9:        2.000000        0.000000       10.000000
   10:        2.000000        0.000000       10.100000
   11:        2.000000        0.000000       10.100000
   12:        2.000000        0.100000       10.000000
   13:        2.000000        6.000000        0.000000
   14:        2.000000        6.000000       10.000000
   15:        2.000000        6.000000       10.000000
   16:        2.000000        6.000000       10.000000
   17:        2.100000        0.000000       10.000000
   18:        3.000000        4.000000       18.000000
   19:        3.000000        7.000000       11.000000
   20:        3.000000        7.000000       11.000000
   21:        4.000000        8.000000       12.000000

  Using tolerance = 0.25

  Number of tolerably unique columns is 10

  XDNU points to the representative for each item.
  UNDX selects the representatives.

     I  XDNU  UNDX

     0     0     0
     1     1     1
     2     2     2
     3     2     6
     4     2     7
     5     2    13
     6     3    14
     7     4    18
     8     3    19
     9     3    21
    10     3
    11     3
    12     3
    13     5
    14     6
    15     6
    16     6
    17     3
    18     7
    19     8
    20     8
    21     9

  The tolerably unique R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        0.000000        0.000000        0.000000
    1:        0.000000        6.000000       10.000000
    2:        1.000000        5.000000        9.000000
    3:        1.900000        0.000000       10.000000
    4:        1.900000        8.000000       10.000000
    5:        2.000000        6.000000        0.000000
    6:        2.000000        6.000000       10.000000
    7:        3.000000        4.000000       18.000000
    8:        3.000000        7.000000       11.000000
    9:        4.000000        8.000000       12.000000

TEST040
  R8COL_MAX computes maximums of an R8COL;
  R8COL_MIN computes minimums of an R8COL;

  The array:

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        3.000000        4.000000
    1:        5.000000        6.000000        7.000000        8.000000
    2:        9.000000       10.000000       11.000000       12.000000

  Column, maximum, minimum:

    1           9           1
    2          10           2
    3          11           3
    4          12           4

TEST041
  R8COL_MEAN computes means of an R8COL;
  R8COL_SUM computes sums of an R8COL;

  The array:

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        3.000000        4.000000
    1:        5.000000        6.000000        7.000000        8.000000
    2:        9.000000       10.000000       11.000000       12.000000

  Column  sum, mean:

    1          15           5
    2          18           6
    3          21           7
    4          24           8

TEST0415
  R8COL_PERMUTE permutes an R8COL in place.

  A (unpermuted):

  Col:          0             1             2             3             4     
  Row

    0:       11.000000       12.000000       13.000000       14.000000       15.000000
    1:       21.000000       22.000000       23.000000       24.000000       25.000000
    2:       31.000000       32.000000       33.000000       34.000000       35.000000

  The (column) permutation vector:

       0:        2
       1:        4
       2:        5
       3:        1
       4:        3

  A (permuted):

  Col:          0             1             2             3             4     
  Row

    0:       12.000000       14.000000       15.000000       11.000000       13.000000
    1:       22.000000       24.000000       25.000000       21.000000       23.000000
    2:       32.000000       34.000000       35.000000       31.000000       33.000000

TEST042
  R8COL_SORTR_A is given an array, and reorders
  it so that a particular column is sorted.

  Here, the special column is 2

  Unsorted array:

  Col:          0             1             2     
  Row

    0:        2.184183        0.617272        8.590969
    1:        9.563176        4.495390        8.408475
    2:        8.295092        4.013063        1.231039
    3:        5.616954        7.546735        0.075124
    4:        4.153071        7.972870        2.603030
    5:        0.661187        0.018384        9.124837
    6:        2.575778        8.975041        1.136640
    7:        1.099568        3.507523        3.516287
    8:        0.438290        0.945448        8.228873
    9:        6.339657        0.136169        2.671323

  Sorted array:

  Col:          0             1             2     
  Row

    0:        0.661187        0.018384        9.124837
    1:        6.339657        0.136169        2.671323
    2:        2.184183        0.617272        8.590969
    3:        0.438290        0.945448        8.228873
    4:        1.099568        3.507523        3.516287
    5:        8.295092        4.013063        1.231039
    6:        9.563176        4.495390        8.408475
    7:        5.616954        7.546735        0.075124
    8:        4.153071        7.972870        2.603030
    9:        2.575778        8.975041        1.136640

TEST043
  R8COL_SWAP swaps two columns of an R8COL;

  The array:

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        3.000000        4.000000
    1:        5.000000        6.000000        7.000000        8.000000
    2:        9.000000       10.000000       11.000000       12.000000

  Swap columns 1 and 3:

  The updated matrix:

  Col:          0             1             2             3     
  Row

    0:        3.000000        2.000000        1.000000        4.000000
    1:        7.000000        6.000000        5.000000        8.000000
    2:       11.000000       10.000000        9.000000       12.000000

TEST044
  R8COL_TO_R8VEC converts an array of columns to a vector.


  The array of columns:

  Col:          0             1             2             3     
  Row

    0:        0.000000        1.000000        2.000000        3.000000
    1:       10.000000       11.000000       12.000000       13.000000
    2:       20.000000       21.000000       22.000000       23.000000

  The resulting vector of columns:

         0:       0.000000
         1:      10.000000
         2:      20.000000
         3:       1.000000
         4:      11.000000
         5:      21.000000
         6:       2.000000
         7:      12.000000
         8:      22.000000
         9:       3.000000
        10:      13.000000
        11:      23.000000

TEST0442
  R8COL_TOL_UNDEX produces index vectors which create a sorted
  list of the tolerably unique columns of an R8COL,
  and a map from the original R8COL to the (implicit)
  R8COL of sorted tolerably unique elements.

  The unsorted R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        1.900000        0.000000       10.000000
    1:        2.000000        6.000000       10.000000
    2:        4.000000        8.000000       12.000000
    3:        1.000000        5.000000        9.000000
    4:        3.000000        7.000000       11.000000
    5:        2.000000        6.000000        0.000000
    6:        2.000000        0.000000       10.100000
    7:        2.000000        0.100000       10.000000
    8:        3.000000        4.000000       18.000000
    9:        1.900000        8.000000       10.000000
   10:        0.000000        0.000000        0.000000
   11:        0.000000        6.000000       10.000000
   12:        2.100000        0.000000       10.000000
   13:        2.000000        6.000000       10.000000
   14:        3.000000        7.000000       11.000000
   15:        2.000000        0.000000       10.000000
   16:        2.000000        0.000000       10.000000
   17:        2.000000        6.000000       10.000000
   18:        1.000000        5.000000        9.000000
   19:        2.000000        0.000000       10.100000
   20:        1.000000        5.000000        9.100000
   21:        1.000000        5.100000        9.000000

  Using tolerance = 0.250000

  Number of tolerably unique columns is 10

  XDNU points to the representative for each item.
  UNDX selects the representatives.

     I  XDNU  UNDX

     0     3    10
     1     6    11
     2     9    18
     3     2     0
     4     8     9
     5     5     5
     6     3    13
     7     3     8
     8     7    14
     9     4     2
    10     0
    11     1
    12     3
    13     6
    14     8
    15     3
    16     3
    17     6
    18     2
    19     3
    20     2
    21     2

  The tolerably unique R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        0.000000        0.000000        0.000000
    1:        0.000000        6.000000       10.000000
    2:        1.000000        5.000000        9.000000
    3:        1.900000        0.000000       10.000000
    4:        1.900000        8.000000       10.000000
    5:        2.000000        6.000000        0.000000
    6:        2.000000        6.000000       10.000000
    7:        3.000000        4.000000       18.000000
    8:        3.000000        7.000000       11.000000
    9:        4.000000        8.000000       12.000000

TEST0443
  R8COL_UNDEX produces index vectors which create a sorted
  list of the unique columns of an (unsorted) R8COL,
  and a map from the original R8COL to the (implicit)
  R8COL of sorted unique elements.

  The R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        1.900000        0.000000       10.000000
    1:        2.000000        6.000000       10.000000
    2:        4.000000        8.000000       12.000000
    3:        1.000000        5.000000        9.000000
    4:        3.000000        7.000000       11.000000
    5:        2.000000        6.000000        0.000000
    6:        2.000000        0.000000       10.100000
    7:        2.000000        0.100000       10.000000
    8:        3.000000        4.000000       18.000000
    9:        1.900000        8.000000       10.000000
   10:        0.000000        0.000000        0.000000
   11:        0.000000        6.000000       10.000000
   12:        2.100000        0.000000       10.000000
   13:        2.000000        6.000000       10.000000
   14:        3.000000        7.000000       11.000000
   15:        2.000000        0.000000       10.000000
   16:        2.000000        0.000000       10.000000
   17:        2.000000        6.000000       10.000000
   18:        1.000000        5.000000        9.000000
   19:        2.000000        0.000000       10.100000
   20:        1.000000        5.000000        9.100000
   21:        1.000000        5.100000        9.000000

  Number of unique columns is 16

  XDNU points to the representative for each item.
  UNDX selects the representatives.

     I  XDNU  UNDX

     0     5    10
     1    11    11
     2    15    18
     3     2    20
     4    14    21
     5    10     0
     6     8     9
     7     9    15
     8    13     6
     9     6     7
    10     0     5
    11     1    13
    12    12    12
    13    11     8
    14    14    14
    15     7     2
    16     7
    17    11
    18     2
    19     8
    20     3
    21     4

  The Unique R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        0.000000        0.000000        0.000000
    1:        0.000000        6.000000       10.000000
    2:        1.000000        5.000000        9.000000
    3:        1.000000        5.000000        9.100000
    4:        1.000000        5.100000        9.000000
    5:        1.900000        0.000000       10.000000
    6:        1.900000        8.000000       10.000000
    7:        2.000000        0.000000       10.000000
    8:        2.000000        0.000000       10.100000
    9:        2.000000        0.100000       10.000000
   10:        2.000000        6.000000        0.000000
   11:        2.000000        6.000000       10.000000
   12:        2.100000        0.000000       10.000000
   13:        3.000000        4.000000       18.000000
   14:        3.000000        7.000000       11.000000
   15:        4.000000        8.000000       12.000000

TEST0445
  R8COL_UNIQUE_COUNT counts unique columns.

  The R8COL (transposed):

  Row:        0             1             2     
  Col

    0:        1.900000        0.000000       10.000000
    1:        2.000000        6.000000       10.000000
    2:        4.000000        8.000000       12.000000
    3:        1.000000        5.000000        9.000000
    4:        3.000000        7.000000       11.000000
    5:        2.000000        6.000000        0.000000
    6:        2.000000        0.000000       10.100000
    7:        2.000000        0.100000       10.000000
    8:        3.000000        4.000000       18.000000
    9:        1.900000        8.000000       10.000000
   10:        0.000000        0.000000        0.000000
   11:        0.000000        6.000000       10.000000
   12:        2.100000        0.000000       10.000000
   13:        2.000000        6.000000       10.000000
   14:        3.000000        7.000000       11.000000
   15:        2.000000        0.000000       10.000000
   16:        2.000000        0.000000       10.000000
   17:        2.000000        6.000000       10.000000
   18:        1.000000        5.000000        9.000000
   19:        2.000000        0.000000       10.100000
   20:        1.000000        5.000000        9.100000
   21:        1.000000        5.100000        9.000000

  Number of unique columns is 16

TEST045
  R8COL_VARIANCE computes variances of an R8COL;

  The array:

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        3.000000        4.000000
    1:        5.000000        6.000000        7.000000        8.000000
    2:        9.000000       10.000000       11.000000       12.000000

  Column  variance:

       0          16
       1          16
       2          16
       3          16

TEST046
  R8R8VEC_INDEX_INSERT_UNIQUE inserts unique values into an
  index sorted array.

  Generate 30 random values:

    XVAL    YVAL   Index

       1      2.000000      3.000000
       2      3.000000      2.000000
       3      2.000000      1.000000
       3      2.000000      1.000000
       4      1.000000      2.000000
       4      1.000000      2.000000
       1      2.000000      3.000000
       5      3.000000      1.000000
       6      4.000000      2.000000
       7      1.000000      1.000000
       8      4.000000      3.000000
       7      1.000000      1.000000
       1      2.000000      3.000000
       4      1.000000      2.000000
       2      3.000000      2.000000
       2      3.000000      2.000000
       6      4.000000      2.000000
       6      4.000000      2.000000
       1      2.000000      3.000000
       3      2.000000      1.000000
       2      3.000000      2.000000
       2      3.000000      2.000000
       9      2.000000      2.000000
       4      1.000000      2.000000
      10      3.000000      3.000000
       4      1.000000      2.000000
      11      1.000000      3.000000
       2      3.000000      2.000000
       8      4.000000      3.000000
       2      3.000000      2.000000

  Vector of unique X Y values:

  I  X(I)   Y(I)

       1      2.000000      3.000000
       2      3.000000      2.000000
       3      2.000000      1.000000
       4      1.000000      2.000000
       5      3.000000      1.000000
       6      4.000000      2.000000
       7      1.000000      1.000000
       8      4.000000      3.000000
       9      2.000000      2.000000
      10      3.000000      3.000000
      11      1.000000      3.000000

  X, Y sorted by index

  I  INDX(I)  X(INDX(I))  Y(INDX(I))

       1       7      1.000000      1.000000
       2       4      1.000000      2.000000
       3      11      1.000000      3.000000
       4       3      2.000000      1.000000
       5       9      2.000000      2.000000
       6       1      2.000000      3.000000
       7       5      3.000000      1.000000
       8       2      3.000000      2.000000
       9      10      3.000000      3.000000
      10       6      4.000000      2.000000
      11       8      4.000000      3.000000

TEST047
  R8R8R8VEC_INDEX_INSERT_UNIQUE inserts unique values into
  an index sorted array.

  Number of random values to generate = 30

    XVAL    YVAL  ZVAL  Index

       2       3       3       1
       3       2       1       2
       2       1       1       3
       3       1       2       4
       2       3       3       1
       1       3       2       5
       1       1       4       6
       4       1       1       7
       2       3       1       8
       2       3       2       9
       3       2       4      10
       2       3       3       1
       2       3       2       9
       2       2       2      11
       3       2       2      12
       3       1       2       4
       3       3       1      13
       3       1       3      14
       3       2       4      10
       3       3       2      15
       4       2       1      16
       3       1       2       4
       2       3       1       8
       1       1       1      17
       2       1       2      18
       2       2       3      19
       3       1       3      14
       3       2       4      10
       4       3       3      20
       1       2       2      21

  Vector of unique X Y Z values:

  I  X(I)   Y(I)    Z(I)

       1       2       3       3
       2       3       2       1
       3       2       1       1
       4       3       1       2
       5       1       3       2
       6       1       1       4
       7       4       1       1
       8       2       3       1
       9       2       3       2
      10       3       2       4
      11       2       2       2
      12       3       2       2
      13       3       3       1
      14       3       1       3
      15       3       3       2
      16       4       2       1
      17       1       1       1
      18       2       1       2
      19       2       2       3
      20       4       3       3
      21       1       2       2

  X Y Z sorted by index:

  I  INDX(I)  X(I)  X(INDX(I))

       1      17       1       1       1
       2       6       1       1       4
       3      21       1       2       2
       4       5       1       3       2
       5       3       2       1       1
       6      18       2       1       2
       7      11       2       2       2
       8      19       2       2       3
       9       8       2       3       1
      10       9       2       3       2
      11       1       2       3       3
      12       4       3       1       2
      13      14       3       1       3
      14       2       3       2       1
      15      12       3       2       2
      16      10       3       2       4
      17      13       3       3       1
      18      15       3       3       2
      19       7       4       1       1
      20      16       4       2       1
      21      20       4       3       3

TEST048
  For data in an interval,
  I4INT_TO_R8INT converts an integer to a real;
  R8INT_TO_I4INT converts a real to an integer.

  Integer interval: [1, 11]
  Real interval:    [100, 200]

  R   I(R)  R(I(R))

       113.394       2           110
       209.321      12           210
       192.836      10           190
        158.02       7           160
        138.99       5           140
       93.5954       0            90
       118.485       3           120
       99.2944       1           100
       90.6978       0            90
       167.416       8           170

TEST049
  For a positive definite symmetric matrix,
  R8MAT_CHOLESKY_FACTOR computes the lower
  triangular Cholesky factor;
  R8MAT_CHORESKY_FACTOR computes the upper
  triangular Cholesky factor;
  R8MAT_CHOLESKY_SOLVE solves a linear system
  using the Cholesky factorization.

  Matrix to be factored:

  Col:          0             1             2             3             4     
  Row

    0:        2.000000       -1.000000        0.000000        0.000000        0.000000
    1:       -1.000000        2.000000       -1.000000        0.000000        0.000000
    2:        0.000000       -1.000000        2.000000       -1.000000        0.000000
    3:        0.000000        0.000000       -1.000000        2.000000       -1.000000
    4:        0.000000        0.000000        0.000000       -1.000000        2.000000

  Cholesky factor L:

  Col:          0             1             2             3             4     
  Row

    0:        1.414214        0.000000        0.000000        0.000000        0.000000
    1:       -0.707107        1.224745        0.000000        0.000000        0.000000
    2:        0.000000       -0.816497        1.154701        0.000000        0.000000
    3:        0.000000        0.000000       -0.866025        1.118034        0.000000
    4:        0.000000        0.000000        0.000000       -0.894427        1.095445

  Product L * L':

  Col:          0             1             2             3             4     
  Row

    0:        2.000000       -1.000000        0.000000        0.000000        0.000000
    1:       -1.000000        2.000000       -1.000000        0.000000        0.000000
    2:        0.000000       -1.000000        2.000000       -1.000000        0.000000
    3:        0.000000        0.000000       -1.000000        2.000000       -1.000000
    4:        0.000000        0.000000        0.000000       -1.000000        2.000000

  Cholesky factor R:

  Col:          0             1             2             3             4     
  Row

    0:        1.095445       -0.894427        0.000000        0.000000        0.000000
    1:        0.000000        1.118034       -0.866025        0.000000        0.000000
    2:        0.000000        0.000000        1.154701       -0.816497        0.000000
    3:        0.000000        0.000000        0.000000        1.224745       -0.707107
    4:        0.000000        0.000000        0.000000        0.000000        1.414214

  Product R * R':

  Col:          0             1             2             3             4     
  Row

    0:        2.000000       -1.000000        0.000000        0.000000        0.000000
    1:       -1.000000        2.000000       -1.000000        0.000000        0.000000
    2:        0.000000       -1.000000        2.000000       -1.000000        0.000000
    3:        0.000000        0.000000       -1.000000        2.000000       -1.000000
    4:        0.000000        0.000000        0.000000       -1.000000        2.000000

  Right hand side:

         0:       0.000000
         1:       0.000000
         2:       0.000000
         3:       0.000000
         4:       6.000000

  Computed solution:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000

TEST050
  R8MAT_DET_2D: determinant of a 2 by 2 matrix;

  Matrix:

  Col:          0             1     
  Row

    0:        1.000000        1.000000
    1:        1.000000       10.000000

  R8MAT_DET_2D computes determinant: 9
  Exact determinant is 9

TEST051
  R8MAT_DET_3D: determinant of a 3 by 3 matrix;

  Matrix:

  Col:          0             1             2     
  Row

    0:        1.000000        1.000000        1.000000
    1:        1.000000       10.000000      100.000000
    2:        1.000000        4.000000       16.000000

  R8MAT_DET_3D computes determinant: -162
  Exact determinant is -162

TEST052
  R8MAT_DET_4D determinant of a 4 by 4 matrix;

  Matrix:

  Col:          0             1             2             3     
  Row

    0:        1.000000        1.000000        1.000000        1.000000
    1:        1.000000       10.000000      100.000000     1000.000000
    2:        1.000000        4.000000       16.000000       64.000000
    3:        1.000000        2.000000        4.000000        8.000000

  R8MAT_DET_4D computes determinant:-2592
  Exact determinant is -2592

TEST053
  R8MAT_DET_5D determinant of a 5 by 5 matrix;

  Matrix:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        1.000000        1.000000        1.000000        1.000000
    1:        1.000000       10.000000      100.000000     1000.000000    10000.000000
    2:        1.000000        4.000000       16.000000       64.000000      256.000000
    3:        1.000000        2.000000        4.000000        8.000000       16.000000
    4:        1.000000        3.000000        9.000000       27.000000       81.000000

  R8MAT_DET_5D computes determinant:-36288
  Exact determinant is -36288

TEST054
  R8MAT_EXPAND_LINEAR linearly interpolates new data
  between old values in a matrix.

  Original matrix:

  Col:          0             1             2     
  Row

    0:        1.000000        1.000000        1.000000
    1:        2.000000        4.000000        8.000000
    2:        3.000000        9.000000       27.000000
    3:        4.000000       16.000000       64.000000

  MFAT = 2
  NFAT = 1

  Fattened matrix:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        1.000000        1.000000        1.000000        1.000000
    1:        1.333333        1.666667        2.000000        2.666667        3.333333
    2:        1.666667        2.333333        3.000000        4.333333        5.666667
    3:        2.000000        3.000000        4.000000        6.000000        8.000000
    4:        2.333333        4.000000        5.666667       10.000000       14.333333
    5:        2.666667        5.000000        7.333333       14.000000       20.666667
    6:        3.000000        6.000000        9.000000       18.000000       27.000000
    7:        3.333333        7.333333       11.333333       25.333333       39.333333
    8:        3.666667        8.666667       13.666667       32.666667       51.666667
    9:        4.000000       10.000000       16.000000       40.000000       64.000000

TEST055
  R8MAT_EXPAND_LINEAR2 fills in a large array by
  interpolating data from a small array.

  Original matrix has dimensions:

  M = 3, N = 2

  Expanded matrix has dimensions:

  M2 = 10, N2 = 5

  The little matrix A:

  Col:          0             1     
  Row

    0:       11.000000       12.000000
    1:       21.000000       22.000000
    2:       31.000000       32.000000

  Expanded array A2:

  Col:          0             1             2             3             4     
  Row

    0:       11.000000       11.250000       11.500000       11.750000       12.000000
    1:       13.222222       13.472222       13.722222       13.972222       14.222222
    2:       15.444444       15.694444       15.944444       16.194444       16.444444
    3:       17.666667       17.916667       18.166667       18.416667       18.666667
    4:       19.888889       20.138889       20.388889       20.638889       20.888889
    5:       22.111111       22.361111       22.611111       22.861111       23.111111
    6:       24.333333       24.583333       24.833333       25.083333       25.333333
    7:       26.555556       26.805556       27.055556       27.305556       27.555556
    8:       28.777778       29.027778       29.277778       29.527778       29.777778
    9:       31.000000       31.250000       31.500000       31.750000       32.000000

TEST0555
  For a matrix in general storage,
  R8MAT_FSS_NEW factors and solves multiple linear systems.

  Matrix order N = 10
  Number of systems NB = 3

  Solutions:

  Col:          0             1             2     
  Row

    0:        1.000000        1.000000        1.000000
    1:        1.000000        2.000000        2.000000
    2:        1.000000        3.000000        3.000000
    3:        1.000000        4.000000        1.000000
    4:        1.000000        5.000000        2.000000
    5:        1.000000        6.000000        3.000000
    6:        1.000000        7.000000        1.000000
    7:        1.000000        8.000000        2.000000
    8:        1.000000        9.000000        3.000000
    9:        1.000000       10.000000        1.000000

TEST056
  R8MAT_GIVENS_POST computes a Givens postmultiplier rotation matrix.

  Matrix A:

  Col:          0             1             2     
  Row

    0:        1.000000        1.000000        1.000000
    1:        1.000000        2.000000        4.000000
    2:        1.000000        3.000000        9.000000

  I = 3  J = 2

  G

  Col:          0             1             2     
  Row

    0:        1.000000        0.000000        0.000000
    1:        0.000000        0.948683        0.316228
    2:        0.000000       -0.316228        0.948683

  A*G

  Col:          0             1             2     
  Row

    0:        1.000000        0.632456        1.264911
    1:        1.000000        0.632456        4.427189
    2:        1.000000       -0.000000        9.486833

TEST057
  R8MAT_GIVENS_PRE computes a Givens premultiplier rotation matrix.

  Matrix A:

  Col:          0             1             2     
  Row

    0:        1.000000        1.000000        1.000000
    1:        1.000000        2.000000        4.000000
    2:        1.000000        3.000000        9.000000

  I = 3  J = 2

  G

  Col:          0             1             2     
  Row

    0:        1.000000        0.000000        0.000000
    1:        0.000000        0.554700        0.832050
    2:        0.000000       -0.832050        0.554700

  G*A

  Col:          0             1             2     
  Row

    0:        1.000000        1.000000        1.000000
    1:        1.386750        3.605551        9.707253
    2:       -0.277350        0.000000        1.664101

TEST058
  R8MAT_HESS estimates the Hessian matrix
  of a scalar function.

  Estimated jacobian:

  Col:          0             1             2     
  Row

    0:        2.000003        1.000000        0.000000
    1:        1.000000        0.000002        9.880316
    2:        0.000000        9.880316      -30.850289

  Exact jacobian:

  Col:          0             1             2     
  Row

    0:        2.000000        1.000000        0.000000
    1:        1.000000        0.000000        9.880316
    2:        0.000000        9.880316      -30.850290

TEST059
  R8VEC_HOUSE_COLUMN returns the compact form of
  a Householder matrix that packs a column
  of a matrix.

  Matrix A:

  Col:          0             1             2             3     
  Row

    0:        1.092091        2.076535        0.219145        2.006531
    1:        4.781588        0.330594        3.169829        3.773367
    2:        4.147546        1.287889        0.308636        3.986435
    3:        2.808477        0.549784        2.247695        0.009192

  Working on column K = 1

  Householder matrix H:

  Col:          0             1             2             3     
  Row

    0:       -0.155781       -0.682069       -0.591626       -0.400615
    1:       -0.682069        0.597486       -0.349140       -0.236418
    2:       -0.591626       -0.349140        0.697156       -0.205068
    3:       -0.400615       -0.236418       -0.205068        0.861140

  Product H*A:

  Col:          0             1             2             3     
  Row

    0:       -7.010416       -1.531174       -3.279238       -5.248439
    1:       -0.000000       -1.798448        1.105304       -0.508058
    2:       -0.000000       -0.558841       -1.482131        0.272729
    3:       -0.000000       -0.700714        1.035091       -2.505514

  Working on column K = 2

  Householder matrix H:

  Col:          0             1             2             3     
  Row

    0:        1.000000        0.000000        0.000000        0.000000
    1:        0.000000       -0.895014       -0.278112       -0.348717
    2:        0.000000       -0.278112        0.959184       -0.051178
    3:        0.000000       -0.348717       -0.051178        0.935830

  Product H*A:

  Col:          0             1             2             3     
  Row

    0:       -7.010416       -1.531174       -3.279238       -5.248439
    1:        0.000000        2.009408       -0.938018        1.252584
    2:       -0.000000        0.000000       -1.782009        0.531121
    3:       -0.000000        0.000000        0.659083       -2.181524

  Working on column K = 3

  Householder matrix H:

  Col:          0             1             2             3     
  Row

    0:        1.000000        0.000000        0.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000
    2:        0.000000        0.000000       -0.937906        0.346889
    3:        0.000000        0.000000        0.346889        0.937906

  Product H*A:

  Col:          0             1             2             3     
  Row

    0:       -7.010416       -1.531174       -3.279238       -5.248439
    1:        0.000000        2.009408       -0.938018        1.252584
    2:        0.000000       -0.000000        1.899986       -1.254887
    3:       -0.000000        0.000000        0.000000       -1.861825

TEST060
  R8MAT_HOUSE_FORM forms a Householder
  matrix from its compact form.

  Compact vector form V:

         0:       0.000000
         1:       0.000000
         2:       1.000000
         3:       2.000000
         4:       3.000000

  Householder matrix H:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        0.000000        0.000000        0.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000        0.000000
    2:        0.000000        0.000000        0.857143       -0.285714       -0.428571
    3:        0.000000        0.000000       -0.285714        0.428571       -0.857143
    4:        0.000000        0.000000       -0.428571       -0.857143       -0.285714

TEST061
  R8MAT_HOUSE_POST computes a Householder postmultiplier;

  Matrix A:

  Col:          0             1             2             3             4     
  Row

    0:        1.092091        0.330594        0.308636        0.009192        4.295484
    1:        4.781588        1.287889        2.247695        4.487520        4.204237
    2:        4.147546        0.549784        2.006531        1.753762        0.615520
    3:        2.808477        0.219145        3.773367        0.472724        0.037562
    4:        2.076535        3.169829        3.986435        0.068084        1.301515

  I = 2  J = 3

  Householder matrix H:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        0.000000        0.000000        0.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000        0.000000
    2:        0.000000        0.000000       -0.733626       -0.641208       -0.225046
    3:        0.000000        0.000000       -0.641208        0.762839       -0.083237
    4:        0.000000        0.000000       -0.225046       -0.083237        0.970786

  Product A*H:

  Col:          0             1             2             3             4     
  Row

    0:        1.092091        0.330594       -1.198997       -0.548429        4.099775
    1:        4.781588        1.287889       -5.472546        1.632070        3.202057
    2:        4.147546        0.549784       -2.735089       -0.000000       -0.000000
    3:        2.808477        0.219145       -3.079806       -2.062029       -0.852063
    4:        2.076535        3.169829       -3.261107       -2.612531        0.360697

TEST062
  R8MAT_HOUSE_PRE computes a Householder premultiplier;

  Matrix A:

  Col:          0             1             2             3             4     
  Row

    0:        1.092091        0.330594        0.308636        0.009192        4.295484
    1:        4.781588        1.287889        2.247695        4.487520        4.204237
    2:        4.147546        0.549784        2.006531        1.753762        0.615520
    3:        2.808477        0.219145        3.773367        0.472724        0.037562
    4:        2.076535        3.169829        3.986435        0.068084        1.301515

  I = 2  J = 3

  Householder matrix H:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        0.000000        0.000000        0.000000        0.000000
    1:        0.000000       -0.926857       -0.362224       -0.097637       -0.014062
    2:        0.000000       -0.362224        0.931907       -0.018354       -0.002644
    3:        0.000000       -0.097637       -0.018354        0.995053       -0.000713
    4:        0.000000       -0.014062       -0.002644       -0.000713        0.999897

  Product H*A:

  Col:          0             1             2             3             4     
  Row

    0:        1.092091        0.330594        0.308636        0.009192        4.295484
    1:       -6.237597       -1.458805       -3.234582       -4.841655       -4.141651
    2:        2.076085        0.033442        0.975936       -0.000000       -0.953397
    3:        2.250118        0.079966        3.495572       -0.000000       -0.385337
    4:        1.996117        3.149783        3.946425        0.000000        1.240607

TEST063
  R8MAT_MAX_INDEX locates the maximum entry of an R8MAT;
  R8MAT_MIN_INDEX locates the minimum entry of an R8MAT;

  Random array:

  Col:          0             1             2     
  Row

    0:        2.184183        0.661187        0.617272
    1:        9.563176        2.575778        4.495390
    2:        8.295092        1.099568        4.013063
    3:        5.616954        0.438290        7.546735
    4:        4.153071        6.339657        7.972870

  Maximum I,J indices            2  1
  Minimum I,J indices            4  2

TEST064
  R8MAT_INVERSE_2D inverts a 2 by 2 matrix.

  Matrix A:

  Col:          0             1     
  Row

    0:        1.000000        2.000000
    1:        3.000000        4.000000

  Inverse matrix A:

  Col:          0             1     
  Row

    0:       -2.000000        1.000000
    1:        1.500000       -0.500000

  Product C = A * B:

  Col:          0             1     
  Row

    0:        1.000000        0.000000
    1:        0.000000        1.000000

TEST065
  R8MAT_INVERSE_3D inverts a 3 by 3 matrix.

  Matrix A:

  Col:          0             1             2     
  Row

    0:        3.000000        2.000000        1.000000
    1:        2.000000        2.000000        1.000000
    2:        0.000000        1.000000        1.000000

  Inverse matrix B:

  Col:          0             1             2     
  Row

    0:        1.000000       -1.000000        0.000000
    1:       -2.000000        3.000000       -1.000000
    2:        2.000000       -3.000000        2.000000

  C = A * B:

  Col:          0             1             2     
  Row

    0:        1.000000        0.000000        0.000000
    1:        0.000000        1.000000        0.000000
    2:        0.000000        0.000000        1.000000

TEST066
  R8MAT_INVERSE_4D inverts a 4 x 4 matrix.

  Matrix A:

  Col:          0             1             2             3     
  Row

    0:        4.000000        3.000000        2.000000        1.000000
    1:        3.000000        3.000000        2.000000        1.000000
    2:        0.000000        2.000000        2.000000        1.000000
    3:        0.000000        0.000000        1.000000        1.000000

  Inverse matrix B:

  Col:          0             1             2             3     
  Row

    0:        1.000000       -1.000000        0.000000       -0.000000
    1:       -3.000000        4.000000       -1.000000        0.000000
    2:        6.000000       -8.000000        3.000000       -1.000000
    3:       -6.000000        8.000000       -3.000000        2.000000

  C = A * B:

  Col:          0             1             2             3     
  Row

    0:        1.000000        0.000000        0.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000
    2:        0.000000        0.000000        1.000000        0.000000
    3:        0.000000        0.000000        0.000000        1.000000

TEST067
  R8MAT_JAC estimates the M by N jacobian matrix
  of a nonlinear function.

  Estimated jacobian:

  Col:          0             1             2             3     
  Row

    0:       -0.832330       -0.416160        0.000000        0.000000
    1:        0.707110        0.000000        1.000000        0.000000
    2:        1.000000        2.000000        3.000000        4.000000

  Exact jacobian:

  Col:          0             1             2             3     
  Row

    0:       -0.832294       -0.416147        0.000000        0.000000
    1:        0.707107        0.000000        1.000000        0.000000
    2:        1.000000        2.000000        3.000000        4.000000

TEST068
  R8MAT_L_INVERSE inverts a lower triangular matrix.

  Matrix A to be inverted:

  Col:          0             1             2             3     
  Row

    0:        1.000000        0.000000        0.000000        0.000000
    1:        2.000000        3.000000        0.000000        0.000000
    2:        4.000000        5.000000        6.000000        0.000000
    3:        7.000000        8.000000        9.000000       10.000000

  Inverse matrix B:

  Col:          0             1             2             3     
  Row

    0:        1.000000        0.000000        0.000000        0.000000
    1:       -0.666667        0.333333        0.000000        0.000000
    2:       -0.111111       -0.277778        0.166667        0.000000
    3:       -0.066667       -0.016667       -0.150000        0.100000

  Product C = A * B:

  Col:          0             1             2             3     
  Row

    0:        1.000000        0.000000        0.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000
    2:        0.000000        0.000000        1.000000        0.000000
    3:        0.000000        0.000000        0.000000        1.000000

TEST069
  R8MAT_L_PRINT prints a lower triangular matrix
  stored compactly.  Only the (possibly) nonzero
  elements are printed.

  A 7 by 7 matrix.

  Col        1     2     3     4     5     6     7
  Row  
       1    11
       2    21    22
       3    31    32    33
       4    41    42    43    44
       5    51    52    53    54    55
       6    61    62    63    64    65    66
       7    71    72    73    74    75    76    77

  A 7 by 3 matrix.

  Col        1     2     3
  Row  
       1    11
       2    21    22
       3    31    32    33
       4    41    42    43
       5    51    52    53
       6    61    62    63
       7    71    72    73

  A 4 by 7 matrix.

  Col        1     2     3     4
  Row  
       1    11
       2    21    22
       3    31    32    33
       4    41    42    43    44

TEST070
  R8MAT_L1_INVERSE inverts a unit lower triangular matrix.

  Matrix A to be inverted:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        0.000000        0.000000        0.000000        0.000000
    1:        2.000000        1.000000        0.000000        0.000000        0.000000
    2:        0.000000        0.000000        1.000000        0.000000        0.000000
    3:        5.000000        0.000000        3.000000        1.000000        0.000000
    4:        0.000000        0.000000        0.000000        0.000000        1.000000
    5:       75.000000        0.000000        0.000000        6.000000        4.000000

  Col:          5     
  Row

    0:        0.000000
    1:        0.000000
    2:        0.000000
    3:        0.000000
    4:        0.000000
    5:        1.000000

  Inverse matrix B:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        0.000000        0.000000        0.000000        0.000000
    1:       -2.000000        1.000000        0.000000        0.000000        0.000000
    2:        0.000000        0.000000        1.000000        0.000000        0.000000
    3:       -5.000000        0.000000       -3.000000        1.000000        0.000000
    4:        0.000000        0.000000        0.000000        0.000000        1.000000
    5:      -45.000000        0.000000       18.000000       -6.000000       -4.000000

  Col:          5     
  Row

    0:        0.000000
    1:        0.000000
    2:        0.000000
    3:        0.000000
    4:        0.000000
    5:        1.000000

  Product C = A * B:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        0.000000        0.000000        0.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000        0.000000
    2:        0.000000        0.000000        1.000000        0.000000        0.000000
    3:        0.000000        0.000000        0.000000        1.000000        0.000000
    4:        0.000000        0.000000        0.000000        0.000000        1.000000
    5:        0.000000        0.000000        0.000000        0.000000        0.000000

  Col:          5     
  Row

    0:        0.000000
    1:        0.000000
    2:        0.000000
    3:        0.000000
    4:        0.000000
    5:        1.000000

TEST071
  R8MAT_LU computes the LU factors of a matrix.

  Matrix to be factored:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        1.000000        1.000000        1.000000        1.000000
    1:        1.000000       10.000000      100.000000     1000.000000    10000.000000
    2:        1.000000        4.000000       16.000000       64.000000      256.000000
    3:        1.000000        2.000000        4.000000        8.000000       16.000000
    4:        1.000000        3.000000        9.000000       27.000000       81.000000

  P factor:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        0.000000        0.000000        0.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000        0.000000
    2:        0.000000        0.000000        1.000000        0.000000        0.000000
    3:        0.000000        0.000000        0.000000        1.000000        0.000000
    4:        0.000000        0.000000        0.000000        0.000000        1.000000

  L factor:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        0.000000        0.000000        0.000000        0.000000
    1:        1.000000        1.000000        0.000000        0.000000        0.000000
    2:        1.000000        0.333333        1.000000        0.000000        0.000000
    3:        1.000000        0.111111        0.444444        1.000000        0.000000
    4:        1.000000        0.222222        0.777778        0.875000        1.000000

  U factor:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        1.000000        1.000000        1.000000        1.000000
    1:        0.000000        9.000000       99.000000      999.000000     9999.000000
    2:        0.000000        0.000000      -18.000000     -270.000000    -3078.000000
    3:        0.000000        0.000000        0.000000       16.000000      272.000000
    4:        0.000000        0.000000        0.000000        0.000000       14.000000

  P*L*U:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        1.000000        1.000000        1.000000        1.000000
    1:        1.000000       10.000000      100.000000     1000.000000    10000.000000
    2:        1.000000        4.000000       16.000000       64.000000      256.000000
    3:        1.000000        2.000000        4.000000        8.000000       16.000000
    4:        1.000000        3.000000        9.000000       27.000000       81.000000

TEST072
  For a real matrix,
  R8MAT_MAX computes the maximum value;
  R8MAT_MIN computes the minimum value;

  Random array:

  Col:          0             1             2     
  Row

    0:        2.184183        0.661187        0.617272
    1:        9.563176        2.575778        4.495390
    2:        8.295092        1.099568        4.013063
    3:        5.616954        0.438290        7.546735
    4:        4.153071        6.339657        7.972870

  Minimum value = 0.43829
  Maximum value = 9.56318

TEST073
  R8MAT_MAXCOL_MINROW computes the maximum over
  columns of the mininum over rows;
  R8MAT_MAXROW_MINCOL computes the maximum over
  rows of the mininum over columns;
  R8MAT_MINCOL_MAXROW computes the minimum over
  columns of the maxinum over rows;
  R8MAT_MINROW_MAXCOL computes the minimum over
  rows of the maxinum over columns;


  Random array:

  Col:          0             1             2     
  Row

    0:        2.184183        0.661187        0.617272
    1:        9.563176        2.575778        4.495390
    2:        8.295092        1.099568        4.013063
    3:        5.616954        0.438290        7.546735
    4:        4.153071        6.339657        7.972870
  MAXCOL_MINROW = 4.15307
  MINROW_MAXCOL = 6.33966
  MAXROW_MINCOL = 2.18418
  MINCOL_MAXROW = 2.18418

TEST0731
  R8MAT_MM multiplies two (rectangular) matrices
  and returns the result as the function value.

  Matrix A:

  Col:          0             1             2     
  Row

    0:        1.000000        2.000000        3.000000
    1:        4.000000        5.000000        6.000000

  Matrix B:

  Col:          0             1             2             3     
  Row

    0:        1.000000        4.000000        0.000000       -1.000000
    1:        2.000000        5.000000        0.000000        2.000000
    2:        3.000000        6.000000        1.000000       -1.000000

  Product C = A * B:

  Col:          0             1             2             3     
  Row

    0:       14.000000       32.000000        3.000000        0.000000
    1:       32.000000       77.000000        6.000000        0.000000

TEST0732
  R8MAT_MXM multiplies two (rectangular) matrices
  and returns the result as an argument.

  Matrix A:

  Col:          0             1             2     
  Row

    0:        1.000000        2.000000        3.000000
    1:        4.000000        5.000000        6.000000

  Matrix B:

  Col:          0             1             2             3     
  Row

    0:        1.000000        4.000000        0.000000       -1.000000
    1:        2.000000        5.000000        0.000000        2.000000
    2:        3.000000        6.000000        1.000000       -1.000000

  Product C = A * B:

  Col:          0             1             2             3     
  Row

    0:       14.000000       32.000000        3.000000        0.000000
    1:       32.000000       77.000000        6.000000        0.000000

TEST0733
  R8MAT_MV_NEW multiplies a (rectangular) matrix times a vector,
  and returns the result as the function value.

  Matrix A:

  Col:          0             1             2     
  Row

    0:        1.000000        2.000000        3.000000
    1:        4.000000        5.000000        6.000000

  Vector B:

         0:       1.000000
         1:       2.000000
         2:       3.000000

  Product C = A * B:

         0:      14.000000
         1:      32.000000

TEST0734
  R8MAT_MV multiplies a (rectangular) matrix times a vector,
  and returns the result as an argument.

  Matrix A:

  Col:          0             1             2     
  Row

    0:        1.000000        2.000000        3.000000
    1:        4.000000        5.000000        6.000000

  Vector B:

         0:       1.000000
         1:       2.000000
         2:       3.000000

  Product C = A * B:

         0:      14.000000
         1:      32.000000

TEST0735
  R8MAT_MTV_NEW multiplies a transposed matrix times a vector,
  and returns the result as the function value.

  Matrix A:

  Col:          0             1             2     
  Row

    0:        1.000000        2.000000        3.000000
    1:        4.000000        5.000000        6.000000

  Vector B:

         0:       1.000000
         1:       2.000000

  Product C = A' * B:

         0:       9.000000
         1:      12.000000
         2:      15.000000

TEST0736
  R8MAT_MTV multiplies a transposed matrix times a vector,
  and returns the result as an argument.

  Matrix A:

  Col:          0             1             2     
  Row

    0:        1.000000        2.000000        3.000000
    1:        4.000000        5.000000        6.000000

  Vector B:

         0:       1.000000
         1:       2.000000

  Product C = A' * B:

         0:       9.000000
         1:      12.000000
         2:      15.000000

TEST07365:
  R8MAT_NEW dynamically creates a 2D array.
  R8MAT_DELETE deletes it.
  Array entries can be addressed using the
  notation "a[i][j]".

  Allocating memory for array A of size 4 by 5.

  Assigning values to A.

  Dynamically allocated matrix A:

         0         1         2         3         4
        10        11        12        13        14
        20        21        22        23        24
        30        31        32        33        34

  Dynamically allocated matrix B = A' * A:

      1400      1460      1520      1580      1640
      1460      1524      1588      1652      1716
      1520      1588      1656      1724      1792
      1580      1652      1724      1796      1868
      1640      1716      1792      1868      1944

TEST0737
  R8MAT_NULLSPACE_SIZE computes the size of the nullspace of a matrix.
  R8MAT_NULLSPACE computes the nullspace of a matrix.

  Input A:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        3.000000        0.000000        2.000000        6.000000
    1:       -2.000000       -6.000000        0.000000       -2.000000       -8.000000
    2:        3.000000        9.000000        0.000000        0.000000        6.000000
    3:       -1.000000       -3.000000        0.000000        1.000000        0.000000

  Col:          5             6     
  Row

    0:        3.000000        1.000000
    1:        3.000000        1.000000
    2:        6.000000        2.000000
    3:        9.000000        3.000000

  Nullspace size is 4

  Nullspace vectors:

  Col:          0             1             2             3     
  Row

    0:       -3.000000        0.000000       -2.000000        0.000000
    1:        1.000000        0.000000        0.000000        0.000000
    2:        0.000000        1.000000        0.000000        0.000000
    3:        0.000000        0.000000       -2.000000        0.000000
    4:        0.000000        0.000000        1.000000        0.000000
    5:        0.000000        0.000000        0.000000       -0.333333
    6:        0.000000        0.000000        0.000000        1.000000

  Product A * Nullspace vectors:

  Col:          0             1             2             3     
  Row

    0:        0.000000        0.000000        0.000000        0.000000
    1:        0.000000        0.000000        0.000000        0.000000
    2:        0.000000        0.000000        0.000000        0.000000
    3:        0.000000        0.000000        0.000000        0.000000

TEST074
  R8MAT_ORTH_UNIFORM_NEW computes a random orthogonal matrix.

  Random orthogonal matrix A

  Col:          0             1             2             3             4     
  Row

    0:       -0.759464       -0.608884        0.182702       -0.122898       -0.063171
    1:        0.213843       -0.148640        0.800476        0.498635        0.206832
    2:        0.256040       -0.439616       -0.291214        0.493242       -0.642719
    3:        0.104542       -0.400564       -0.462440        0.273299        0.734899
    4:       -0.548635        0.503440       -0.164930        0.646745        0.008151

  AT*A

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        0.000000       -0.000000        0.000000        0.000000
    1:        0.000000        1.000000       -0.000000       -0.000000       -0.000000
    2:       -0.000000       -0.000000        1.000000        0.000000        0.000000
    3:        0.000000       -0.000000        0.000000        1.000000       -0.000000
    4:        0.000000       -0.000000        0.000000       -0.000000        1.000000

TEST075
  R8MAT_PLOT prints a symbolic picture of a matrix.
  Typically,

    - for negative, 
    0 for zero, and
    + for positive entries

  or

    X for nonzero and
    0 for zero.


  A plot of the matrix:

          1234567890123456789012345678901234567890123456789012345678901234567890

     1    -+00000000000000000000000000000000000000000000000000000000000000000000
     2    +-+0000000000000000000000000000000000000000000000000000000000000000000
     3    0+-+000000000000000000000000000000000000000000000000000000000000000000
     4    00+-+00000000000000000000000000000000000000000000000000000000000000000
     5    000+-+0000000000000000000000000000000000000000000000000000000000000000
     6    0000+-+000000000000000000000000000000000000000000000000000000000000000
     7    00000+-+00000000000000000000000000000000000000000000000000000000000000
     8    000000+-+0000000000000000000000000000000000000000000000000000000000000
     9    0000000+-+000000000000000000000000000000000000000000000000000000000000
    10    00000000+-+00000000000000000000000000000000000000000000000000000000000

          123456789012345678901234567890

     1    00000000000000000000000000000+
     2    000000000000000000000000000000
     3    000000000000000000000000000000
     4    000000000000000000000000000000
     5    000000000000000000000000000000
     6    000000000000000000000000000000
     7    000000000000000000000000000000
     8    000000000000000000000000000000
     9    000000000000000000000000000000
    10    000000000000000000000000000000

TEST076
  R8MAT_POWER_METHOD applies the power method
  to a matrix.

  Estimated eigenvalue = 3.73198

  Estimated eigenvector V:

         0:       0.292877
         1:      -0.499987
         2:       0.573126
         3:      -0.499987
         4:       0.292877

  Value of A*V:

         0:       1.085740
         1:      -1.865976
         2:       2.146225
         3:      -1.865976
         4:       1.085740

TEST0764
  R8MAT_REF computes the row echelon form of a matrix.

  Input A:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        3.000000        0.000000        2.000000        6.000000
    1:       -2.000000       -6.000000        0.000000       -2.000000       -8.000000
    2:        3.000000        9.000000        0.000000        0.000000        6.000000
    3:       -1.000000       -3.000000        0.000000        1.000000        0.000000

  Col:          5             6     
  Row

    0:        3.000000        1.000000
    1:        3.000000        1.000000
    2:        6.000000        2.000000
    3:        9.000000        3.000000

  REF form:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        3.000000        0.000000        2.000000        6.000000
    1:        0.000000        0.000000        0.000000        1.000000        2.000000
    2:        0.000000        0.000000        0.000000        0.000000        0.000000
    3:        0.000000        0.000000        0.000000        0.000000        0.000000

  Col:          5             6     
  Row

    0:        3.000000        1.000000
    1:        4.500000        1.500000
    2:        1.000000        0.333333
    3:        0.000000        0.000000

TEST0766
  R8MAT_RREF computes the reduced row echelon form of a matrix.

  Input A:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        3.000000        0.000000        2.000000        6.000000
    1:       -2.000000       -6.000000        0.000000       -2.000000       -8.000000
    2:        3.000000        9.000000        0.000000        0.000000        6.000000
    3:       -1.000000       -3.000000        0.000000        1.000000        0.000000

  Col:          5             6     
  Row

    0:        3.000000        1.000000
    1:        3.000000        1.000000
    2:        6.000000        2.000000
    3:        9.000000        3.000000

  REF form:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        3.000000        0.000000        0.000000        2.000000
    1:        0.000000        0.000000        0.000000        1.000000        2.000000
    2:        0.000000        0.000000        0.000000        0.000000        0.000000
    3:        0.000000        0.000000        0.000000        0.000000        0.000000

  Col:          5             6     
  Row

    0:        0.000000        0.000000
    1:        0.000000        0.000000
    2:        1.000000        0.333333
    3:        0.000000        0.000000

TEST077
  R8MAT_SOLVE solves linear systems.

  The linear system:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        2.000000        3.000000       14.000000        7.000000
    1:        4.000000        5.000000        6.000000       32.000000       16.000000
    2:        7.000000        8.000000        0.000000       23.000000        7.000000

  The computed solutions:

         1  
         1  

         2  
         0  

         3  
         2  


TEST0775
  R8MAT_SOLVE_2D solves 2D linear systems.

  Solution / Computed:

        0.415307        0.415307
       0.0661187       0.0661187

  Solution / Computed:

       0.0617272       0.0617272
        0.449539        0.449539

  Solution / Computed:

        0.897504        0.897504
        0.350752        0.350752

  Solution / Computed:

        0.123104        0.123104
      0.00751236      0.00751236

  Solution / Computed:

        0.822887        0.822887
        0.267132        0.267132

TEST0776
  R8MAT_SOLVE_3D solves 3D linear systems.

  Solution / Computed:

        0.633966        0.633966
       0.0617272       0.0617272
        0.449539        0.449539

  Solution / Computed:

        0.840847        0.840847
        0.123104        0.123104
      0.00751236      0.00751236

  Solution / Computed:

        0.453794        0.453794
        0.911977        0.911977
        0.597917        0.597917

  Solution / Computed:

        0.714471        0.714471
        0.117707        0.117707
        0.299329        0.299329

  Solution / Computed:

        0.763537        0.763537
        0.761731        0.761731
         0.40697         0.40697

TEST078
  R8MAT_SOLVE2 is a linear solver.


  Right hand side:

         0:       5.000000
         1:      11.000000

  The system is nonsingular.

  Computed solution:

         0:       1.000000
         1:       2.000000

  Right hand side:

         0:       4.000000
         1:       2.000000
         2:       2.000000

R8MAT_SOLVE2 - Warning:
  Consistent singularity, equation = 3

  The system is singular, but consistent.

  Computed solution:

         0:       2.000000
         1:       0.000000
         2:       0.000000

  Right hand side:

         0:       5.000000
         1:      11.000000
         2:      16.000000
         3:      15.000000

  The system is nonsingular.

  Computed solution:

         0:      -2.000000
         1:      -6.000000
         2:      10.000000
         3:       7.000000

  Right hand side:

         0:      13.000000
         1:      17.000000
         2:      20.000000

R8MAT_SOLVE2 - Warning:
  Inconsistent singularity, equation = 2

  The system is singular and inconsistent.

  Computed solution:

         0:       6.428571
         1:       0.000000
         2:       0.142857

TEST079
  For a symmetric R8MAT:
  R8MAT_SYMM_JACOBI diagonalizes;

  Matrix to diagonalize:

  Col:          0             1             2             3             4     
  Row

    0:        1.498774        0.146895        0.141816       -0.211542       -0.607313
    1:        0.146895        3.220644       -0.194771        0.336027        0.635336
    2:        0.141816       -0.194771        3.745087       -1.039492        0.810790
    3:       -0.211542        0.336027       -1.039492        3.972535        0.505106
    4:       -0.607313        0.635336        0.810790        0.505106        2.562960

  Computed Eigenvalues:

             1
             4
             3
             5
             2

TEST080
  R8MAT_TO_R8PLU determines the compressed PLU factors
  of a real general matrix.
  R8PLU_TO_R8MAT determines the original matrix from
  the compressed PLU factors.

  Matrix order N = 5

  The matrix A:

  Col:          0             1             2             3             4     
  Row

    0:        0.218418        0.066119        0.061727        0.001838        0.859097
    1:        0.956318        0.257578        0.449539        0.897504        0.840847
    2:        0.829509        0.109957        0.401306        0.350752        0.123104
    3:        0.561695        0.043829        0.754673        0.094545        0.007512
    4:        0.415307        0.633966        0.797287        0.013617        0.260303

  The pivot vector P:

       0:        2
       1:        5
       2:        4
       3:        4
       4:        5

  The compressed LU factors:

  Col:          0             1             2             3             4     
  Row

    0:        0.956318        0.257578        0.449539        0.897504        0.840847
    1:       -0.228395        0.522106        0.602062       -0.376149       -0.104858
    2:       -0.867399        0.217324        0.614552       -0.510026       -0.507943
    3:       -0.587352        0.205820       -0.231419       -0.391459       -0.511487
    4:       -0.434277       -0.013961        0.080304       -0.610161        0.939815

  The recovered matrix A2:

  Col:          0             1             2             3             4     
  Row

    0:        0.218418        0.066119        0.061727        0.001838        0.859097
    1:        0.956318        0.257578        0.449539        0.897504        0.840847
    2:        0.829509        0.109957        0.401306        0.350752        0.123104
    3:        0.561695        0.043829        0.754673        0.094545        0.007512
    4:        0.415307        0.633966        0.797287        0.013617        0.260303

TEST081
  R8MAT_TRACE computes the trace of a matrix

  Matrix:

  Col:          0             1             2             3     
  Row

    0:        4.000000        3.000000        2.000000        1.000000
    1:        3.000000        3.000000        2.000000        1.000000
    2:        0.000000        2.000000        2.000000        1.000000
    3:        0.000000        0.000000        1.000000        1.000000

  Trace is 10

TEST082
  R8MAT_TRANSPOSE_PRINT prints an R8MAT,
  transposed.

  Matrix row order M =    7
  Matrix column order N = 12

  The transposed matrix A:

  Row:        0             1             2             3             4     
  Col

    0:      101.000000      201.000000      301.000000      401.000000      501.000000
    1:      102.000000      202.000000      302.000000      402.000000      502.000000
    2:      103.000000      203.000000      303.000000      403.000000      503.000000
    3:      104.000000      204.000000      304.000000      404.000000      504.000000
    4:      105.000000      205.000000      305.000000      405.000000      505.000000
    5:      106.000000      206.000000      306.000000      406.000000      506.000000
    6:      107.000000      207.000000      307.000000      407.000000      507.000000
    7:      108.000000      208.000000      308.000000      408.000000      508.000000
    8:      109.000000      209.000000      309.000000      409.000000      509.000000
    9:      110.000000      210.000000      310.000000      410.000000      510.000000
   10:      111.000000      211.000000      311.000000      411.000000      511.000000
   11:      112.000000      212.000000      312.000000      412.000000      512.000000

  Row:        5             6     
  Col

    0:      601.000000      701.000000
    1:      602.000000      702.000000
    2:      603.000000      703.000000
    3:      604.000000      704.000000
    4:      605.000000      705.000000
    5:      606.000000      706.000000
    6:      607.000000      707.000000
    7:      608.000000      708.000000
    8:      609.000000      709.000000
    9:      610.000000      710.000000
   10:      611.000000      711.000000
   11:      612.000000      712.000000

TEST083
  R8MAT_U_INVERSE inverts an upper triangular matrix.

  Input matrix A

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        4.000000        7.000000
    1:        0.000000        3.000000        5.000000        8.000000
    2:        0.000000        0.000000        6.000000        9.000000
    3:        0.000000        0.000000        0.000000       10.000000

  Inverse matrix B:

  Col:          0             1             2             3     
  Row

    0:        1.000000       -0.666667       -0.111111       -0.066667
    1:        0.000000        0.333333       -0.277778       -0.016667
    2:        0.000000        0.000000        0.166667       -0.150000
    3:        0.000000        0.000000        0.000000        0.100000

  Product C = A * B:

  Col:          0             1             2             3     
  Row

    0:        1.000000        0.000000        0.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000
    2:        0.000000        0.000000        1.000000        0.000000
    3:        0.000000        0.000000        0.000000        1.000000

TEST084
  R8MAT_U1_INVERSE inverts a unit upper triangular matrix.

  Input matrix A

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        2.000000        0.000000        5.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000        0.000000
    2:        0.000000        0.000000        1.000000        3.000000        0.000000
    3:        0.000000        0.000000        0.000000        1.000000        0.000000
    4:        0.000000        0.000000        0.000000        0.000000        1.000000
    5:        0.000000        0.000000        0.000000        0.000000        0.000000

  Col:          5     
  Row

    0:       75.000000
    1:        0.000000
    2:        0.000000
    3:        6.000000
    4:        4.000000
    5:        1.000000

  Inverse matrix B:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000       -2.000000        0.000000       -5.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000        0.000000
    2:        0.000000        0.000000        1.000000       -3.000000        0.000000
    3:        0.000000        0.000000        0.000000        1.000000        0.000000
    4:        0.000000        0.000000        0.000000        0.000000        1.000000
    5:        0.000000        0.000000        0.000000        0.000000        0.000000

  Col:          5     
  Row

    0:      -45.000000
    1:        0.000000
    2:       18.000000
    3:       -6.000000
    4:       -4.000000
    5:        1.000000

  Product C = A * B:

  Col:          0             1             2             3             4     
  Row

    0:        1.000000        0.000000        0.000000        0.000000        0.000000
    1:        0.000000        1.000000        0.000000        0.000000        0.000000
    2:        0.000000        0.000000        1.000000        0.000000        0.000000
    3:        0.000000        0.000000        0.000000        1.000000        0.000000
    4:        0.000000        0.000000        0.000000        0.000000        1.000000
    5:        0.000000        0.000000        0.000000        0.000000        0.000000

  Col:          5     
  Row

    0:        0.000000
    1:        0.000000
    2:        0.000000
    3:        0.000000
    4:        0.000000
    5:        1.000000

TEST085
  R8MAT_UNIFORM sets a matrix to random values.


  The random matrix:

  Col:          0             1             2             3     
  Row

    0:        3.747346        2.528950        2.493818        2.014707
    1:        9.650541        4.060622        5.596312        9.180032
    2:        8.636074        2.879654        5.210450        4.806019
    3:        6.493564        2.350632        8.037388        2.756358
    4:        5.322457        7.071726        8.378296        2.108935

TEST086
  R8PLU_DET determines the determinant of a matrix from its
  compressed PLU factors.

  Matrix order N = 5

  The matrix A:

  Col:          0             1             2             3             4     
  Row

    0:        0.218418        0.066119        0.061727        0.001838        0.859097
    1:        0.956318        0.257578        0.449539        0.897504        0.840847
    2:        0.829509        0.109957        0.401306        0.350752        0.123104
    3:        0.561695        0.043829        0.754673        0.094545        0.007512
    4:        0.415307        0.633966        0.797287        0.013617        0.260303

  The determinant = 0.112888

TEST086
  R8PLU_DET determines the determinant of a matrix from its
  compressed PLU factors.

  Matrix order N = 5

  The matrix A:

  Col:          0             1             2             3             4     
  Row

    0:        0.218418        0.066119        0.061727        0.001838        0.859097
    1:        0.956318        0.257578        0.449539        0.897504        0.840847
    2:        0.829509        0.109957        0.401306        0.350752        0.123104
    3:        0.561695        0.043829        0.754673        0.094545        0.007512
    4:        0.415307        0.633966        0.797287        0.013617        0.260303

  The determinant = 0.112888

TEST088
  R8PLU_MUL computes the product A*x
  using the compressed PLU factors of A.

  Matrix order N = 5

  The matrix A:

  Col:          0             1             2             3             4     
  Row

    0:        0.218418        0.066119        0.061727        0.001838        0.859097
    1:        0.956318        0.257578        0.449539        0.897504        0.840847
    2:        0.829509        0.109957        0.401306        0.350752        0.123104
    3:        0.561695        0.043829        0.754673        0.094545        0.007512
    4:        0.415307        0.633966        0.797287        0.013617        0.260303

  The right hand side B (computed from A):

         0:       4.838675
         1:      10.614344
         2:       4.271871
         3:       3.329115
         4:       5.431082

  The right hand side B (computed from PLU):

         0:       4.838675
         1:      10.614344
         2:       4.271871
         3:       3.329115
         4:       5.431082

TEST089
  R8PLU_SOL solves the linear system A*x=b
  using the compressed PLU factors of A.

  Matrix order N = 5

  The matrix A:

  Col:          0             1             2             3             4     
  Row

    0:        0.218418        0.066119        0.061727        0.001838        0.859097
    1:        0.956318        0.257578        0.449539        0.897504        0.840847
    2:        0.829509        0.109957        0.401306        0.350752        0.123104
    3:        0.561695        0.043829        0.754673        0.094545        0.007512
    4:        0.415307        0.633966        0.797287        0.013617        0.260303

  The right hand side B (computed from A):

         0:       4.838675
         1:      10.614344
         2:       4.271871
         3:       3.329115
         4:       5.431082

  The computed solution X:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000

TEST090
  R8POLY_DERIV computes the coefficients of
  the derivative of a polynomial.

  The initial polynomial

  p(x) =  1 * x^4
         -10 * x^3
         +35 * x^2
         -50 * x
         +24

  The derivative of order 0


 

  p(x) =  1 * x^4
         -10 * x^3
         +35 * x^2
         -50 * x
         +24

  The derivative of order 1


 

  p(x) =  4 * x^3
         -30 * x^2
         +70 * x
         -50

  The derivative of order 2


 

  p(x) =  12 * x^2
         -60 * x
         +70

  The derivative of order 3


 

  p(x) =  24 * x
         -60

  The derivative of order 4


 

  p(x) = 0

TEST091
  R8POLY_LAGRANGE_COEF returns the coefficients for
  a Lagrange basis polynomial.

  Abscissas:

         0:       1.000000
         1:       2.000000
         2:       3.000000

  Lagrange basis polynomial    1:

         3     0
      -2.5     1
       0.5     2

  Lagrange basis polynomial    2:

        -3     0
         4     1
        -1     2

  Lagrange basis polynomial    3:

         1     0
      -1.5     1
       0.5     2

TEST092
  R8POLY_LAGRANGE_COEF returns the coefficients
  for a Lagrange basis polynomial.
  R8POLY_DERIV computes derivatives of a polynomial.

  Abscissas:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000

  The Lagrange basis polynomial:

  p(x) =  0.0416667 * x^4
         -0.583333 * x^3
         +2.95833 * x^2
         -6.41667 * x
         +5

  The derivative of order 1

 

  p(x) =  0.166667 * x^3
         -1.75 * x^2
         +5.91667 * x
         -6.41667

  The derivative of order 2

 

  p(x) =  0.5 * x^2
         -3.5 * x
         +5.91667

  The derivative of order 3

 

  p(x) =  1 * x
         -3.5

  The derivative of order 4

 

  p(x) = 0

  The Lagrange basis polynomial:

  p(x) = -0.166667 * x^4
         +2.16667 * x^3
         -9.83333 * x^2
         +17.8333 * x
         -10

  The derivative of order 1

 

  p(x) = -0.666667 * x^3
         +6.5 * x^2
         -19.6667 * x
         +17.8333

  The derivative of order 2

 

  p(x) = -2 * x^2
         +13 * x
         -19.6667

  The derivative of order 3

 

  p(x) = -4 * x
         +13

  The derivative of order 4

 

  p(x) = 0

  The Lagrange basis polynomial:

  p(x) =  0.25 * x^4
         -3 * x^3
         +12.25 * x^2
         -19.5 * x
         +10

  The derivative of order 1

 

  p(x) =  1 * x^3
         -9 * x^2
         +24.5 * x
         -19.5

  The derivative of order 2

 

  p(x) =  3 * x^2
         -18 * x
         +24.5

  The derivative of order 3

 

  p(x) =  6 * x
         -18

  The derivative of order 4

 

  p(x) = 0

  The Lagrange basis polynomial:

  p(x) = -0.166667 * x^4
         +1.83333 * x^3
         -6.83333 * x^2
         +10.1667 * x
         -5

  The derivative of order 1

 

  p(x) = -0.666667 * x^3
         +5.5 * x^2
         -13.6667 * x
         +10.1667

  The derivative of order 2

 

  p(x) = -2 * x^2
         +11 * x
         -13.6667

  The derivative of order 3

 

  p(x) = -4 * x
         +11

  The derivative of order 4

 

  p(x) = 0

  The Lagrange basis polynomial:

  p(x) =  0.0416667 * x^4
         -0.416667 * x^3
         +1.45833 * x^2
         -2.08333 * x
         +1

  The derivative of order 1

 

  p(x) =  0.166667 * x^3
         -1.25 * x^2
         +2.91667 * x
         -2.08333

  The derivative of order 2

 

  p(x) =  0.5 * x^2
         -2.5 * x
         +2.91667

  The derivative of order 3

 

  p(x) =  1 * x
         -2.5

  The derivative of order 4

 

  p(x) = 0

TEST093
  R8POLY_LAGRANGE_0 evaluates the Lagrange
  factor W(X) at a point.
  R8POLY_LAGRANGE_1 evaluates the Lagrange
  factor W'(X) at a point.
  R8POLY_LAGRANGE_2 evaluates the Lagrange
  factor W''(X) at a point.

  The number of data points is 5

  Abscissas:

         0:       0.000000
         1:       1.000000
         2:       2.000000
         3:       3.000000
         4:       4.000000

      X          W(X)          W'(X)        W''(X)

           0             0            24          -100
    0.222222       3.22444        6.5362      -59.0398
    0.444444       3.48998      -3.02027      -28.6145
    0.666667       2.30453       -6.8642      -7.40741
    0.888889      0.720757      -6.89773       5.89849
     1.11111     -0.598825      -4.73038         12.62
     1.33333      -1.31687      -1.67901       14.0741
     1.55556      -1.35616       1.23213       11.5775
     1.77778     -0.834561       3.27145       6.44719
           2             0             4             0
     2.22222      0.834561       3.27145      -6.44719
     2.44444       1.35616       1.23213      -11.5775
     2.66667       1.31687      -1.67901      -14.0741
     2.88889      0.598825      -4.73038        -12.62
     3.11111     -0.720757      -6.89773      -5.89849
     3.33333      -2.30453       -6.8642       7.40741
     3.55556      -3.48998      -3.02027       28.6145
     3.77778      -3.22444        6.5362       59.0398
           4             0            24           100

TEST094
  R8POLY_LAGRANGE_FACTOR evaluates the Lagrange
  factor W(X) at a point.

  For this test, we use 5 functions.

  Abscissas:

         0:       0.000000
         1:       0.800000
         2:       1.600000
         3:       2.400000
         4:       3.200000

      X          W(X)          W'(X)

       4.5     131.818     274.543
         4     39.3216      112.23
       3.5     5.92515     32.1429
         3     -1.1088      2.0304
       2.5    -0.26775     -2.8571
         2      0.4608      0.2304
       1.5    -0.16065      1.5429
         1     -0.3696     -1.1696

TEST095
  R8POLY_LAGRANGE_VAL evaluates a Lagrange
  interpolating polynomial at a point.

  For this test, we use 5 functions.

  Abscissas:

         0:       0.000000
         1:       1.000000
         2:       2.000000
         3:       3.000000
         4:       4.000000

  Here are the values of the functions at
  several points:

      X          L1          L2          L3      L4          L5

       4.5    0.273438    -1.40625     2.95312    -3.28125     2.46094  
         4           0          -0           0          -0           1  
       3.5  -0.0390625     0.21875   -0.546875     1.09375    0.273438  
         3          -0           0          -0           1           0  
       2.5   0.0234375    -0.15625    0.703125     0.46875  -0.0390625  
         2           0          -0           1           0          -0  
       1.5  -0.0390625     0.46875    0.703125    -0.15625   0.0234375  
         1          -0           1           0          -0           0  
       0.5    0.273438     1.09375   -0.546875     0.21875  -0.0390625  

  And the derivatives:

      X          L'1         L'2         L'3     L'4         L'5

       4.5    0.916667      -4.625       9.375    -9.54167       3.875  
         4        0.25    -1.33333           3          -4     2.08333  
       3.5  -0.0416667    0.208333      -0.375   -0.708333    0.916667  
         3  -0.0833333         0.5        -1.5    0.833333        0.25  
       2.5           0   0.0416667      -1.125       1.125  -0.0416667  
         2   0.0833333   -0.666667           0    0.666667  -0.0833333  
       1.5   0.0416667      -1.125       1.125  -0.0416667           0  
         1       -0.25   -0.833333         1.5        -0.5   0.0833333  
       0.5   -0.916667    0.708333       0.375   -0.208333   0.0416667  

TEST098
  R8POLY_VALUE_HORNER evaluates a polynomial at a
  point, using Horner's method.

  The polynomial:

  p(x) =  1 * x^4
         -10 * x^3
         +35 * x^2
         -50 * x
         +24

        X            P(X)

               0              24
        0.333333         10.8642
        0.666667         3.45679
               1               0
         1.33333       -0.987654
         1.66667       -0.691358
               2               0
         2.33333        0.493827
         2.66667        0.493827
               3               0
         3.33333       -0.691358
         3.66667       -0.987654
               4               0
         4.33333         3.45679
         4.66667         10.8642
               5              24

TEST099
  R8POLY2_EX finds the extreme value
  of a parabola determined by three points.
  R8POLY2_EX2 finds the extreme value
  of a parabola determined by three points.

  Parabolic coefficients A = 2, B = -4, c = 10

  X, Y data:

           1.4           8.4
           2.4          10.4
           3.4          16.4

  R8POLY2_EX returns XMIN = 1, YMIN = 8

  R8POLY2_EX2 returns XMIN = 268501069, YMIN = 1
  and A = 2, B = -4, c = 10

TEST100
  R8POLY2_VAL evaluates a parabola given
  3 data points.

  Our parabola will be 2*x^2 + 3 * x + 1.

  Case 1: 3 distinct data points:

  -1  0
  1  6
  3  28

  Sampled data:

  X, Y, Y', Y''

  0  1  3  4
  1  6  7  4
  2  15  11  4
  3  28  15  4

  Case 2: X1=X2, X3 distinct:

  -1  0
  -1  -1
  3  28

  Sampled data:

   X, Y, Y', Y''

  0  1  3  4
  1  6  7  4
  2  15  11  4
  3  28  15  4

  Case 3: X1=X2=X3:

  -1  0
  -1  -1
  -1  4

  Sampled data:

  X, Y, Y', Y''

  0  1  3  4
  1  6  7  4
  2  15  11  4
  3  28  15  4

TEST101
  R8POLY2_VAL2 evaluates parabolas through
  3 points in a table

  Our data tables will actually be parabolas:
    A: 2*x^2 + 3 * x + 1.
    B: 4*x^2 - 2 * x + 5.

     0           2          15          17
     1           4          45          61
     2           6          91         137
     3           8         153         245
     4          10         231         385

  Interpolated data:

  LEFT, X, Y1, Y2

     0           1           6           7
     1           3          28          35
     2           5          66          95
     2           7         120         187
     2           9         190         311

TEST105
  For an R8ROW (a matrix regarded as rows):
  R8ROW_MAX computes maximums;
  R8ROW_MIN computes minimums;

  The original matrix:

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        3.000000        4.000000
    1:        5.000000        6.000000        7.000000        8.000000
    2:        9.000000       10.000000       11.000000       12.000000

  Row maximum, minimum:

    1           4           1
    2           8           5
    3          12           9

TEST106
  For an R8ROW (a matrix regarded as rows):
  R8ROW_MEAN computes means;
  R8ROW_SUM computes sums;

  The original matrix:

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        3.000000        4.000000
    1:        5.000000        6.000000        7.000000        8.000000
    2:        9.000000       10.000000       11.000000       12.000000

  Row sum, mean:

    1          10         2.5
    2          26         6.5
    3          42        10.5

TEST107
  For an R8ROW (a matrix regarded as rows):
  R8ROW_SWAP swaps two rows;

  The original matrix:

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        3.000000        4.000000
    1:        5.000000        6.000000        7.000000        8.000000
    2:        9.000000       10.000000       11.000000       12.000000

  Swap rows 1 and 3

  The modified matrix:

  Col:          0             1             2             3     
  Row

    0:        9.000000       10.000000       11.000000       12.000000
    1:        5.000000        6.000000        7.000000        8.000000
    2:        1.000000        2.000000        3.000000        4.000000

TEST108
  R8ROW_TO_R8VEC converts an array of rows into a vector.

  The array of rows:

  Col:          0             1             2             3     
  Row

    0:        0.000000        1.000000        2.000000        3.000000
    1:       10.000000       11.000000       12.000000       13.000000
    2:       20.000000       21.000000       22.000000       23.000000

  The resulting vector of rows:

         0:       0.000000
         1:      10.000000
         2:      20.000000
         3:       1.000000
         4:      11.000000
         5:      21.000000
         6:       2.000000
         7:      12.000000
         8:      22.000000
         9:       3.000000
        10:      13.000000
        11:      23.000000

TEST109
  For an R8ROW (a matrix regarded as rows):
  R8ROW_VARIANCE computes variances;

  The original matrix:

  Col:          0             1             2             3     
  Row

    0:        1.000000        2.000000        3.000000        4.000000
    1:        5.000000        6.000000        7.000000        8.000000
    2:        9.000000       10.000000       11.000000       12.000000

  Row variances:

    1     1.66667
    2     1.66667
    3     1.66667

TEST110
  R8SLMAT_PRINT prints a strictly lower triangular matrix
  stored compactly.  Only the (possibly) nonzero 
  elements are printed.

  R8SLMAT:

  Col   1       2       3       4       5       
  Row
    2:     21.000000
    3:     31.000000     32.000000
    4:     41.000000     42.000000     43.000000
    5:     51.000000     52.000000     53.000000     54.000000
    6:     61.000000     62.000000     63.000000     64.000000     65.000000
    7:     71.000000     72.000000     73.000000     74.000000     75.000000

  Col   6       
  Row
    7:     76.000000

  R8SLMAT:

  Col   1       2       3       
  Row
    2:     21.000000
    3:     31.000000     32.000000
    4:     41.000000     42.000000     43.000000
    5:     51.000000     52.000000     53.000000
    6:     61.000000     62.000000     63.000000
    7:     71.000000     72.000000     73.000000

  R8SLMAT:

  Col   1       2       3       
  Row
    2:     21.000000
    3:     31.000000     32.000000
    4:     41.000000     42.000000     43.000000

TEST111
  For an R8VEC:
  R8VEC_AMAX:      maximum magnitude entry;
  R8VEC_AMIN:      minimum magnitude entry.

  Input vector:

         0:      -5.631634
         1:       9.126352
         2:       6.590185
         3:       1.233909
         4:      -1.693858
         5:      -8.677625
         6:      -4.848444
         7:      -7.800864
         8:      -9.123420
         9:       2.679314

  Maximum absolute:         9.12635
  Minimum absolute:         1.23391

TEST112
  R8VEC_BRACKET finds a pair of entries in a
  sorted real array which bracket a value.

  The array (must be in ascending order!)

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000
         5:       5.000000
         6:       7.000000
         7:       8.000000
         8:       9.000000
         9:      10.000000

  Search for XVAL = -10
  X[1-1] = 1
  X[2-1] = 2

  Search for XVAL = 1
  X[1-1] = 1
  X[2-1] = 2

  Search for XVAL = 4.5
  X[4-1] = 4
  X[5-1] = 5

  Search for XVAL = 5
  X[6-1] = 5
  X[7-1] = 7

  Search for XVAL = 10
  X[9-1] = 9
  X[10-1] = 10

  Search for XVAL = 12
  X[9-1] = 9
  X[10-1] = 10

TEST113
  R8VEC_BRACKET2 finds a pair of entries in a
  sorted R8VEC which bracket a value.

  The array (must be in ascending order!)

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000
         5:       5.000000
         6:       7.000000
         7:       8.000000
         8:       9.000000
         9:      10.000000

  Search for XVAL = -10
  Start = 9
  Left =  1
  Right = 2
  X[1-1] = 1
  X[2-1] = 2

  Search for XVAL = 1
  Start = 1
  Left =  1
  Right = 1
  X[1-1] = 1
  X[1-1] = 1

  Search for XVAL = 4.5
  Start = 1
  Left =  4
  Right = 5
  X[4-1] = 4
  X[5-1] = 5

  Search for XVAL = 5
  Start = 4
  Left =  5
  Right = 5
  X[5-1] = 5
  X[5-1] = 5

  Search for XVAL = 10
  Start = 5
  Left =  9
  Right = 10
  X[9-1] = 9
  X[10-1] = 10

  Search for XVAL = 12
  Start = 9
  Left =  10
  Right = -1
  X[10-1] = 10

TEST114
  R8VEC_BRACKET3 finds a pair of entries in a
  sorted real array which bracket a value.

  The array (must be in ascending order!):

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000
         5:       5.000000
         6:       7.000000
         7:       8.000000
         8:       9.000000
         9:      10.000000

  Search for XVAL = -10
  Starting guess for interval is = 4
  Nearest interval:
   X[0]= 1
   X[1]= 2

  Search for XVAL = 1
  Starting guess for interval is = 0
  Nearest interval:
   X[0]= 1
   X[1]= 2

  Search for XVAL = 4.5
  Starting guess for interval is = 0
  Nearest interval:
   X[3]= 4
   X[4]= 5

  Search for XVAL = 5
  Starting guess for interval is = 3
  Nearest interval:
   X[3]= 4
   X[4]= 5

  Search for XVAL = 10
  Starting guess for interval is = 3
  Nearest interval:
   X[8]= 9
   X[9]= 10

  Search for XVAL = 12
  Starting guess for interval is = 8
  Nearest interval:
   X[8]= 9
   X[9]= 10

TEST1143
  R8VEC_BRACKET5 finds a pair of entries in a
  sorted R8VEC which bracket a value.

  Sorted array:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000
         5:       5.000000
         6:       7.000000
         7:       8.000000
         8:       9.000000
         9:      10.000000

        LEFT                   RIGHT
      X(LEFT)       XVAL     X(RIGHT)

          -1
                -10.0000  (Not bracketed!)
           0                       1
      1.0000      1.0000      2.0000
           3                       4
      4.0000      4.5000      5.0000
           5                       6
      5.0000      5.0000      7.0000
           8                       9
      9.0000     10.0000     10.0000
          -1
                 12.0000  (Not bracketed!)

TEST1145
  R8VEC_CHEBYSPACE_NEW computes N Chebyshev points in [R1,R2].

  N = 5, R1 = -1.000000, R2 = 1.000000

  Chebyshev points:

         0:      -1.000000
         1:      -0.707107
         2:       0.000000
         3:       0.707107
         4:       1.000000

  N = 7, R1 = 0.000000, R2 = 10.000000

  Chebyshev points:

         0:       0.000000
         1:       0.669873
         2:       2.500000
         3:       5.000000
         4:       7.500000
         5:       9.330127
         6:      10.000000

TEST1147
  R8VEC_CONVOLUTION computes the convolution
  of two vectors.

  The factor X:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000

  The factor Y:

         0:      -1.000000
         1:       5.000000
         2:       3.000000

  The convolution z = x star y:

         0:      -1.000000
         1:       3.000000
         2:      10.000000
         3:      17.000000
         4:      29.000000
         5:      12.000000

  Correct answer:

         0:      -1.000000
         1:       3.000000
         2:      10.000000
         3:      17.000000
         4:      29.000000
         5:      12.000000

TEST115
  R8VEC_CONVOLUTION_CIRC computes the circular convolution
  of two vectors.

  The factor X:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000

  The factor Y:

         0:       1.000000
         1:       2.000000
         2:       4.000000
         3:       8.000000

  The circular convolution z = xCCy:

         0:      37.000000
         1:      44.000000
         2:      43.000000
         3:      26.000000

  Correct answer:

         0:      37.000000
         1:      44.000000
         2:      43.000000
         3:      26.000000

TEST116
  R8VEC_DIF estimates derivatives.

  Estimate the derivative of order N = 4
  Using H = 0.01
  at argument X = 1

  The difference coefficients:

         0: 6250000.000000
         1: -25000000.000000
         2: 37500000.000000
         3: -25000000.000000
         4: 6250000.000000

  Estimate is FDIF = 2.71846

TEST1165
  R8VEC_DIRECT_PRODUCT forms the entries of a
  direct product of a given number of R8VEC factors.

     J         X(1)      X(2)      X(3)

     0           1        50       800
     1           2        50       800
     2           3        50       800
     3           4        50       800
     4           1        60       800
     5           2        60       800
     6           3        60       800
     7           4        60       800
     8           1        70       800
     9           2        70       800
    10           3        70       800
    11           4        70       800
    12           1        50       900
    13           2        50       900
    14           3        50       900
    15           4        50       900
    16           1        60       900
    17           2        60       900
    18           3        60       900
    19           4        60       900
    20           1        70       900
    21           2        70       900
    22           3        70       900
    23           4        70       900

TEST1166
  R8VEC_DIRECT_PRODUCT2 forms the entries of a
  direct product of a given number of R8VEC factors.

     J         W(J)

     0         418
     1         627
     2        1045
     3        1463
     4         494
     5         741
     6        1235
     7        1729
     8         646
     9         969
    10        1615
    11        2261
    12         462
    13         693
    14        1155
    15        1617
    16         546
    17         819
    18        1365
    19        1911
    20         714
    21        1071
    22        1785
    23        2499

TEST117
  R8VEC_EVEN computes N evenly spaced values
  between XLO and XHI.

  XLO = 0
  XHI = 99
  while N = 10

  Resulting array:

         0:       0.000000
         1:      11.000000
         2:      22.000000
         3:      33.000000
         4:      44.000000
         5:      55.000000
         6:      66.000000
         7:      77.000000
         8:      88.000000
         9:      99.000000

TEST118:
  R8VEC_EVEN2 interpolates a specified number of
  points pairs of values in a vector.

  Input data:

             0
  (4)
             1
  (3)
             5
  (5)
             2
  (0)
             0

  Resulting vector:

  *             0
              0.2
              0.4
              0.6
              0.8
  *             1
                2
                3
                4
  *             5
              4.5
                4
              3.5
                3
              2.5
  *             2
  *             0

TEST120
  R8VEC_EXPAND_LINEAR linearly interpolates new data
  between old values.


  Original vector:

         0:      16.000000
         1:       4.000000
         2:       0.000000
         3:       4.000000
         4:      16.000000
         5:      36.000000

  Expansion factor is 3

  Fattened vector:

         0:      16.000000
         1:      13.000000
         2:      10.000000
         3:       7.000000
         4:       4.000000
         5:       3.000000
         6:       2.000000
         7:       1.000000
         8:       0.000000
         9:       1.000000
        10:       2.000000
        11:       3.000000
        12:       4.000000
        13:       7.000000
        14:      10.000000
        15:      13.000000
        16:      16.000000
        17:      21.000000
        18:      26.000000
        19:      31.000000
        20:      36.000000

TEST121
  R8VEC_FRAC: K-th smallest R8VEC entry;

  Array to search:

         0:       0.218418
         1:       0.956318
         2:       0.829509
         3:       0.561695
         4:       0.415307
         5:       0.066119
         6:       0.257578
         7:       0.109957
         8:       0.043829
         9:       0.633966

  Fractile  Value

       1        0.043829
       6        0.415307

TEST122
  R8VEC_HISTOGRAM histograms a real vector.

  Uniform data:

  Histogram of data:

                       0       0
           0        0.05      63
        0.05         0.1      37
         0.1        0.15      49
        0.15         0.2      37
         0.2        0.25      46
        0.25         0.3      57
         0.3        0.35      49
        0.35         0.4      52
         0.4        0.45      51
        0.45         0.5      49
         0.5        0.55      50
        0.55         0.6      56
         0.6        0.65      60
        0.65         0.7      52
         0.7        0.75      44
        0.75         0.8      47
         0.8        0.85      54
        0.85         0.9      48
         0.9        0.95      52
        0.95           1      47
           1                    0

  Normal data:

  Histogram of data:

                      -3       0
          -3        -2.7       2
        -2.7        -2.4       2
        -2.4        -2.1      11
        -2.1        -1.8      12
        -1.8        -1.5      32
        -1.5        -1.2      55
        -1.2        -0.9      66
        -0.9        -0.6      75
        -0.6        -0.3     115
        -0.3           0     111
           0         0.3     115
         0.3         0.6     117
         0.6         0.9     103
         0.9         1.2      65
         1.2         1.5      46
         1.5         1.8      29
         1.8         2.1      17
         2.1         2.4      15
         2.4         2.7       7
         2.7           3       4
           3                    1

TEST123
  R8VEC_INDEX_INSERT inserts values into an
  index sorted array.
  R8VEC_INDEX_DELETE_ALL deletes all copies of a
  particular value.
  R8VEC_INDEX_DELETE_ONE deletes one copies of a
  particular value.
  R8VEC_INDEX_DELETE_DUPES deletes duplicates.

  Generate some random values:

  4
  19
  17
  11
  8
  1
  5
  2
  1
  13
  1
  9
  8
  15
  16
  0
  18
  7
  2
  0

  Indexed list of entries:

  I  INDX(I)  X(I)  X(INDX(I))

    1   18       8       0
    2   22       7       0
    3    8       4       1
    4   13      19       1
    5   11      17       1
    6   10      11       2
    7   21       8       2
    8    3       1       4
    9    9       5       5
   10    2       2       7
   11   20       1       7
   12   23      13       7
   13    1       1       8
   14   15       9       8
   15   24       8       8
   16    7      15       8
   17   14      16       9
   18    6       0      11
   19   12      18      13
   20   16       7      15
   21   17       2      16
   22    5       0      17
   23   19       7      18
   24    4       8      19

  Call R8VEC_INDEX_DELETE_ONE to delete one value of 8:

  Call R8VEC_INDEX_DELETE_ALL to delete all values of 7:

  Indexed list of entries:

  I  INDX(I)  X(I)  X(INDX(I))

    1   17       8       0
    2   20       4       0
    3    7      19       1
    4   12      17       1
    5   10      11       1
    6    9       8       2
    7   19       1       2
    8    2       5       4
    9    8       2       5
   10    1       1       8
   11   14      13       8
   12    6       1       8
   13   13       9       9
   14    5       8      11
   15   11      15      13
   16   15      16      15
   17   16       0      16
   18    4      18      17
   19   18       2      18
   20    3       0      19

  Call R8VEC_INDEX_DELETE_DUPES to delete duplicates:

  Indexed list of unique entries:

  I  INDX(I)  X(I)

    1    1       0
    2    2       1
    3    3       2
    4    4       4
    5    5       5
    6    6       8
    7    7       9
    8    8      11
    9    9      13
   10   10      15
   11   11      16
   12   12      17
   13   13      18
   14   14      19

TEST124
  R8VEC_INDEX_INSERT_UNIQUE inserts unique values into an
  index sorted array.
  R8VEC_INDEX_ORDER sorts an index sorted array.

  Generate some random values:

       4
      19
      17
      11
       8
       1
       5
       2
       1
      13
       1
       9
       8
      15
      16
       0
      18
       7
       2
       0

  Indexed list of unique entries:

  I  INDX(I)  X(I)  X(INDX(I))

    1   13       4       0
    2    6      19       1
    3    8      17       2
    4    1      11       4
    5    7       8       5
    6   15       1       7
    7    5       5       8
    8   10       2       9
    9    4      13      11
   10    9       9      13
   11   11      15      15
   12   12      16      16
   13    3       0      17
   14   14      18      18
   15    2       7      19

  Now call R8VEC_INDEX_ORDER to carry out the sorting:

  X:

         0:       0.000000
         1:       1.000000
         2:       2.000000
         3:       4.000000
         4:       5.000000
         5:       7.000000
         6:       8.000000
         7:       9.000000
         8:      11.000000
         9:      13.000000
        10:      15.000000
        11:      16.000000
        12:      17.000000
        13:      18.000000
        14:      19.000000

TEST125
  R8VEC_INDEX_INSERT_UNIQUE inserts unique values into an
  index sorted array.
  R8VEC_INDEX_SEARCH searches for an entry 
  with a given value.

  Generate some random values:

         4
        19
        17
        11
         8
         1
         5
         2
         1
        13
         1
         9
         8
        15
        16
         0
        18
         7
         2
         0

  Indexed list of entries:

  I  INDX(I)  X(I)  X(INDX(I))

    2    6      19       1
    3    8      17       2
    4    1      11       4
    5    7       8       5
    6   15       1       7
    7    5       5       8
    8   10       2       9
    9    4      13      11
   10    9       9      13
   11   11      15      15
   12   12      16      16
   13    3       0      17
   14   14      18      18
   15    2       7      19
   16   12      18      16

  Results of search for given XVAL:

  XVAL  Less Equal More

       0    0    1    2
       1    1    2    3
       2    2    3    4
       3    3    0    4
       4    3    4    5
       5    4    5    6
       6    5    0    6
       7    5    6    7
       8    6    7    8
       9    7    8    9
      10    8    0    9
      11    8    9   10
      12    9    0   10
      13    9   10   11
      14   10    0   11
      15   10   11   12
      16   11   12   13
      17   12   13   14
      18   13   14   15
      19   14   15   16
      20   15    0   16

TEST1251
  R8VEC_INDEX_SORTED_RANGE seeks the range I_LO:I_HI
  of entries of sorted indexed R so that
  R_LO <= R(INDX(I)) <= R_HI for I_LO <= I <= I_HI.

  Array

         0:       0.218418
         1:       0.956318
         2:       0.829509
         3:       0.561695
         4:       0.415307
         5:       0.066119
         6:       0.257578
         7:       0.109957
         8:       0.043829
         9:       0.633966
        10:       0.061727
        11:       0.449539
        12:       0.401306
        13:       0.754673
        14:       0.797287
        15:       0.001838
        16:       0.897504
        17:       0.350752
        18:       0.094545
        19:       0.013617

     I  INDX    R(INDX(I))

     0    15        0.001838
     1    19        0.013617
     2     8        0.043829
     3    10        0.061727
     4     5        0.066119
     5    18        0.094545
     6     7        0.109957
     7     0        0.218418
     8     6        0.257578
     9    17        0.350752
    10    12        0.401306
    11     4        0.415307
    12    11        0.449539
    13     3        0.561695
    14     9        0.633966
    15    13        0.754673
    16    14        0.797287
    17     2        0.829509
    18    16        0.897504
    19     1        0.956318

  R_LO              0.840847
  R_HI              0.859097
  Empty range in R.

  Array

         0:       0.123104
         1:       0.007512
         2:       0.260303
         3:       0.912484
         4:       0.113664
         5:       0.351629
         6:       0.822887
         7:       0.267132
         8:       0.692066
         9:       0.561662
        10:       0.861216
        11:       0.453794
        12:       0.911977
        13:       0.597917
        14:       0.188955
        15:       0.761492
        16:       0.396988
        17:       0.185314
        18:       0.574366
        19:       0.367027

     I  INDX    R(INDX(I))

     0     1        0.007512
     1     4        0.113664
     2     0        0.123104
     3    17        0.185314
     4    14        0.188955
     5     2        0.260303
     6     7        0.267132
     7     5        0.351629
     8    19        0.367027
     9    16        0.396988
    10    11        0.453794
    11     9        0.561662
    12    18        0.574366
    13    13        0.597917
    14     8        0.692066
    15    15        0.761492
    16     6        0.822887
    17    10        0.861216
    18    12        0.911977
    19     3        0.912484

  R_LO              0.361529
     8    19        0.367027
     9    16        0.396988
    10    11        0.453794
    11     9        0.561662
    12    18        0.574366
    13    13        0.597917
  R_HI              0.617205

  Array

         0:       0.212930
         1:       0.714471
         2:       0.117707
         3:       0.299329
         4:       0.825003
         5:       0.824660
         6:       0.061862
         7:       0.710781
         8:       0.088283
         9:       0.777994
        10:       0.745303
        11:       0.308675
        12:       0.899373
        13:       0.763537
        14:       0.761731
        15:       0.406970
        16:       0.938749
        17:       0.562088
        18:       0.017820
        19:       0.501103

     I  INDX    R(INDX(I))

     0    18        0.017820
     1     6        0.061862
     2     8        0.088283
     3     2        0.117707
     4     0        0.212930
     5     3        0.299329
     6    11        0.308675
     7    15        0.406970
     8    19        0.501103
     9    17        0.562088
    10     7        0.710781
    11     1        0.714471
    12    10        0.745303
    13    14        0.761731
    14    13        0.763537
    15     9        0.777994
    16     5        0.824660
    17     4        0.825003
    18    12        0.899373
    19    16        0.938749

  R_LO              0.041909
     1     6        0.061862
     2     8        0.088283
     3     2        0.117707
     4     0        0.212930
     5     3        0.299329
     6    11        0.308675
  R_HI              0.368851

  Array

         0:       0.271724
         1:       0.858573
         2:       0.029037
         3:       0.017442
         4:       0.152384
         5:       0.114319
         6:       0.353907
         7:       0.119308
         8:       0.206653
         9:       0.212924
        10:       0.612948
        11:       0.809519
        12:       0.587090
        13:       0.215492
        14:       0.768056
        15:       0.723297
        16:       0.448019
        17:       0.855176
        18:       0.945017
        19:       0.909057

     I  INDX    R(INDX(I))

     0     3        0.017442
     1     2        0.029037
     2     5        0.114319
     3     7        0.119308
     4     4        0.152384
     5     8        0.206653
     6     9        0.212924
     7    13        0.215492
     8     0        0.271724
     9     6        0.353907
    10    16        0.448019
    11    12        0.587090
    12    10        0.612948
    13    15        0.723297
    14    14        0.768056
    15    11        0.809519
    16    17        0.855176
    17     1        0.858573
    18    19        0.909057
    19    18        0.945017

  R_LO              0.030195
     2     5        0.114319
     3     7        0.119308
     4     4        0.152384
     5     8        0.206653
     6     9        0.212924
     7    13        0.215492
     8     0        0.271724
     9     6        0.353907
    10    16        0.448019
  R_HI              0.519726

  Array

         0:       0.481067
         1:       0.292313
         2:       0.902640
         3:       0.667842
         4:       0.412278
         5:       0.156948
         6:       0.833282
         7:       0.964404
         8:       0.740790
         9:       0.456099
        10:       0.653561
        11:       0.406827
        12:       0.540539
        13:       0.832281
        14:       0.145756
        15:       0.717128
        16:       0.775651
        17:       0.362262
        18:       0.531111
        19:       0.379977

     I  INDX    R(INDX(I))

     0    14        0.145756
     1     5        0.156948
     2     1        0.292313
     3    17        0.362262
     4    19        0.379977
     5    11        0.406827
     6     4        0.412278
     7     9        0.456099
     8     0        0.481067
     9    18        0.531111
    10    12        0.540539
    11    10        0.653561
    12     3        0.667842
    13    15        0.717128
    14     8        0.740790
    15    16        0.775651
    16    13        0.832281
    17     6        0.833282
    18     2        0.902640
    19     7        0.964404

  R_LO              0.269285
     2     1        0.292313
     3    17        0.362262
     4    19        0.379977
     5    11        0.406827
     6     4        0.412278
     7     9        0.456099
     8     0        0.481067
     9    18        0.531111
    10    12        0.540539
    11    10        0.653561
    12     3        0.667842
    13    15        0.717128
    14     8        0.740790
    15    16        0.775651
    16    13        0.832281
    17     6        0.833282
  R_HI              0.877418

TEST1252
  R8VEC_INDEXED_HEAP_D creates a descending heap
  from an indexed vector.

  The data vector:

         0:     101.000000
         1:     102.000000
         2:     103.000000
         3:     104.000000
         4:     105.000000
         5:     106.000000
         6:     107.000000
         7:     108.000000
         8:     109.000000
         9:     110.000000
        10:     111.000000
        11:     112.000000
        12:     113.000000
        13:     114.000000
        14:     115.000000
        15:     116.000000
        16:     117.000000
        17:     118.000000
        18:     119.000000
        19:     120.000000

  The index vector:

       0:        0
       1:       10
       2:       16
       3:        4
       4:        6
       5:       12
       6:       14
       7:        2
       8:       18
       9:        8

  A(INDX):

     0  101.000000
     1  111.000000
     2  117.000000
     3  105.000000
     4  107.000000
     5  113.000000
     6  115.000000
     7  103.000000
     8  119.000000
     9  109.000000

  The data vector (should NOT change):

         0:     101.000000
         1:     102.000000
         2:     103.000000
         3:     104.000000
         4:     105.000000
         5:     106.000000
         6:     107.000000
         7:     108.000000
         8:     109.000000
         9:     110.000000
        10:     111.000000
        11:     112.000000
        12:     113.000000
        13:     114.000000
        14:     115.000000
        15:     116.000000
        16:     117.000000
        17:     118.000000
        18:     119.000000
        19:     120.000000

  The index vector (may change):

       0:       18
       1:       10
       2:       16
       3:        4
       4:        8
       5:       12
       6:       14
       7:        2
       8:        0
       9:        6

  A(INDX) is now a descending heap:

     0  119.000000
     1  111.000000
     2  117.000000
     3  105.000000
     4  109.000000
     5  113.000000
     6  115.000000
     7  103.000000
     8  101.000000
     9  107.000000

TEST1255
  For an indexed R8VEC,
  R8VEC_INDEXED_HEAP_D_INSERT inserts a value into the heap.
  R8VEC_INDEXED_HEAP_D_EXTRACT extracts the maximum value;
  R8VEC_INDEXED_HEAP_D_MAX reports the maximum value.

  These 3 operations are enough to model a priority queue.

  The data vector:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000
         5:       6.000000
         6:       7.000000
         7:       8.000000
         8:       9.000000
         9:      10.000000
        10:      11.000000
        11:      12.000000
        12:      13.000000
        13:      14.000000
        14:      15.000000
        15:      16.000000
        16:      17.000000
        17:      18.000000
        18:      19.000000
        19:      20.000000

  The index vector:

       0:        8
       1:        1
       2:        7
       3:       13
       4:        4

  A(INDX):

     0    9.000000
     1    2.000000
     2    8.000000
     3   14.000000
     4    5.000000

  The index vector after heaping:

       0:       13
       1:        8
       2:        7
       3:        1
       4:        4

  A(INDX) after heaping:

     0   14.000000
     1    9.000000
     2    8.000000
     3    2.000000
     4    5.000000

  Inserting value 7.000000
  Current maximum is 14.000000

  Inserting value 15.000000
  Current maximum is 15.000000

  Inserting value 1.000000
  Current maximum is 15.000000

  Inserting value 19.000000
  Current maximum is 19.000000

  Inserting value 20.000000
  Current maximum is 20.000000

  The data vector after insertions:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000
         5:       6.000000
         6:       7.000000
         7:       8.000000
         8:       9.000000
         9:      10.000000
        10:      11.000000
        11:      12.000000
        12:      13.000000
        13:      14.000000
        14:      15.000000
        15:      16.000000
        16:      17.000000
        17:      18.000000
        18:      19.000000
        19:      20.000000

  The index vector after insertions:

       0:       19
       1:       18
       2:       13
       3:        8
       4:       14
       5:        6
       6:        7
       7:        0
       8:        1
       9:        4

  A(INDX) after insertions:

     0   20.000000
     1   19.000000
     2   14.000000
     3    9.000000
     4   15.000000
     5    7.000000
     6    8.000000
     7    1.000000
     8    2.000000
     9    5.000000

  Now extract the maximum several times.

  Extracting maximum element A[19] = 20.000000
  Extracting maximum element A[18] = 19.000000
  Extracting maximum element A[14] = 15.000000
  Extracting maximum element A[13] = 14.000000
  Extracting maximum element A[8] = 9.000000

  The data vector after extractions:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000
         5:       6.000000
         6:       7.000000
         7:       8.000000
         8:       9.000000
         9:      10.000000
        10:      11.000000
        11:      12.000000
        12:      13.000000
        13:      14.000000
        14:      15.000000
        15:      16.000000
        16:      17.000000
        17:      18.000000
        18:      19.000000
        19:      20.000000

  The index vector after extractions:

       0:        7
       1:        4
       2:        6
       3:        1
       4:        0

  A(INDX) after extractions:

     0    8.000000
     1    5.000000
     2    7.000000
     3    2.000000
     4    1.000000

TEST1256
  R8VEC_LEGENDRE_NEW computes N Legendre points in [R1,R2].

  N = 5,   R1 = -1,  R2 = 1

  Legendre points:

         0:      -0.906180
         1:      -0.538469
         2:       0.000000
         3:       0.538469
         4:       0.906180

  N = 7,   R1 = 0,  R2 = 10

  Legendre points:

         0:       0.254460
         1:       1.292344
         2:       2.970774
         3:       5.000000
         4:       7.029226
         5:       8.707656
         6:       9.745540

TEST1258
  For a R8VEC:
  R8VEC_LINSPACE_NEW: evenly spaced points between A and B;
  R8VEC_MIDSPACE_NEW: evenly spaced midpoints between A and B

  r8vec_linspace ( 5, 10, 20 )

         0:      10.000000
         1:      12.500000
         2:      15.000000
         3:      17.500000
         4:      20.000000

  r8vec_midspace ( 5, 10, 20 )

         0:      11.000000
         1:      13.000000
         2:      15.000000
         3:      17.000000
         4:      19.000000

TEST126
  R8VEC_MAX produces the maximum entry in a real array.
  R8VEC_MIN produces the minimum entry.

  Using random seed 123456789.

  The array:

         0:       0.218418
         1:       0.956318
         2:       0.829509
         3:       0.561695
         4:       0.415307
         5:       0.066119
         6:       0.257578
         7:       0.109957
         8:       0.043829
         9:       0.633966

  R8VEC_MAX reports the maximum value is 0.956318.
  R8VEC_MIN reports the minimum value is 0.043829.

TEST127
  For an R8VEC:
  R8VEC_MAX_INDEX: index of maximum entry;
  R8VEC_MIN_INDEX: index of minimum entry;

  Input vector:

         0:      -5.631634
         1:       9.126352
         2:       6.590185
         3:       1.233909
         4:      -1.693858
         5:      -8.677625
         6:      -4.848444
         7:      -7.800864
         8:      -9.123420
         9:       2.679314

  Maximum index:           1
  Minimum index:           8

TEST128
  For an R8VEC:
  R8VEC_MEAN:      mean value;
  R8VEC_MEDIAN:    median value;

  Input vector:

         0:      -5.631634
         1:       9.126352
         2:       6.590185
         3:       1.233909
         4:      -1.693858
         5:      -8.677625
         6:      -4.848444
         7:      -7.800864
         8:      -9.123420
         9:       2.679314

  Mean:    -1.81461
  Median:  -4.84844

TEST129
  For an R8VEC:
  R8VEC_NORM_L1:   L1 norm.
  R8VEC_NORM_L2:   L2 norm.
  R8VEC_NORM_LI:   L-infinity norm.

  Input vector:

         0:      -5.631634
         1:       9.126352
         2:       6.590185
         3:       1.233909
         4:      -1.693858
         5:      -8.677625
         6:      -4.848444
         7:      -7.800864
         8:      -9.123420
         9:       2.679314

  L1 norm:           57.4056
  L2 norm:           20.3201
  L-Infinity norm:   9.12635

TEST130
  R8VEC_NORMAL_01 computes a vector of normally
  distributed random numbers.
  Using initial random number seed = 123456789

  Test #1: Call 5 times, 1 value each time.

       0         1.67904
       1       -0.472769
       2        -0.56606
       3       -0.231124
       4         1.21293

  Test #2: Restore the random number seed.
  Call 5 times, 1 value each time.
  The results should be identical.

       0         1.67904
       1       -0.472769
       2        -0.56606
       3       -0.231124
       4         1.21293

  Test #3: Restore the random number seed.
  Call 1 time for 5 values.
  The results should be identical.

       0         1.67904
       1       -0.472769
       2        -0.56606
       3       -0.231124
       4         1.21293

  Test #4: Restore the random number seed.
  Call for 2, 1, and 2 values.
  The results should be identical.

       0         1.67904
       1       -0.472769
       0        -0.56606
       0       -0.231124
       1         1.21293

  Test #5:
  Number of samples was 1000
  Minimum value was -3.02975
  Maximum value was 3.32858
  Average value was -0.0151559
  Variance was      0.999674
  Expected average  = 0.0
  Expected variance = 1.0

TEST152
  For an R8VEC:
  R8VEC_NORMALIZE_L1:  make unit sum;

  Input vector:

         0:      -5.631634
         1:       9.126352
         2:       6.590185
         3:       1.233909
         4:      -1.693858
         5:      -8.677625
         6:      -4.848444
         7:      -7.800864
         8:      -9.123420
         9:       2.679314

  After calling R8VEC_NORMALIZE_L1:

         0:       0.310350
         1:      -0.502938
         2:      -0.363174
         3:      -0.067999
         4:       0.093346
         5:       0.478209
         6:       0.267190
         7:       0.429892
         8:       0.502776
         9:      -0.147652

TEST131
  R8VEC_ORDER_TYPE classifies a real vector as
  -1: no order
   0: all equal;
   1: ascending;
   2: strictly ascending;
   3: descending;
   4: strictly descending.


The following vector has order type 0.




         0:       1.000000
         1:       3.000000
         2:       2.000000
         3:       4.000000

The following vector has order type 0.




         0:       2.000000
         1:       2.000000
         2:       2.000000
         3:       2.000000

The following vector has order type 0.




         0:       1.000000
         1:       2.000000
         2:       2.000000
         3:       4.000000

The following vector has order type 0.




         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000

The following vector has order type 0.




         0:       4.000000
         1:       4.000000
         2:       3.000000
         3:       1.000000

The following vector has order type 0.




         0:       9.000000
         1:       7.000000
         2:       3.000000
         3:       0.000000

TEST132
  R8VEC_PERMUTE permutes an R8VEC in place.

  I, Perm(I), X(I)

       1       2             1
       2       4             2
       3       5             3
       4       1             4
       5       3             5

  Permuted array:

         0:       2.000000
         1:       4.000000
         2:       5.000000
         3:       1.000000
         4:       3.000000

TEST133
  R8VEC_POLARIZE decomposes a vector into
  components parallel and normal to a direction.

  Original vector:

         0:       1.000000
         1:       2.000000
         2:       3.000000

  Direction vector:

         0:       3.000000
         1:       1.000000
         2:      -2.000000

  Normal component:

         0:       1.214286
         1:       2.071429
         2:       2.857143

  Parallel component:

         0:      -0.214286
         1:      -0.071429
         2:       0.142857

  Dot product of P and A_normal (should be 0) 8.88178e-16
  Cosine of angle between P and A_parallel (should be 1 or -1) = -1

  Sum of components (should equal A):

         0:       1.000000
         1:       2.000000
         2:       3.000000

TEST134
  R8VEC_ROTATE rotates an R8VEC in place.

  Rotate entries 2 places to the right.

  Original array:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000

  Rotated array:

         0:       4.000000
         1:       5.000000
         2:       1.000000
         3:       2.000000
         4:       3.000000

TEST135
  R8VEC_REVERSE reverses an R8VEC.

  Original array:

         0:       1.000000
         1:       2.000000
         2:       3.000000
         3:       4.000000
         4:       5.000000

  Reversed array:

         0:       5.000000
         1:       4.000000
         2:       3.000000
         3:       2.000000
         4:       1.000000

TEST136
  For ascending order:
  R8VEC_SEARCH_BINARY_A searches a sorted array;

  Using initial random number seed = 123456789

  Sorted vector A:

         0:       0.043829
         1:       0.066119
         2:       0.109957
         3:       0.218418
         4:       0.257578
         5:       0.415307
         6:       0.561695
         7:       0.633966
         8:       0.829509
         9:       0.956318

  Search the array for the value 0.218418

  SEARCH RESULT:

    The value occurs in index 4

TEST137
  R8VEC_SORT_BUBBLE_A sorts a real array.

  Using random seed 123456789.

  Unsorted array:

         0:       0.218418
         1:       0.956318
         2:       0.829509
         3:       0.561695
         4:       0.415307
         5:       0.066119
         6:       0.257578
         7:       0.109957
         8:       0.043829
         9:       0.633966
        10:       0.061727
        11:       0.449539
        12:       0.401306
        13:       0.754673
        14:       0.797287
        15:       0.001838
        16:       0.897504
        17:       0.350752
        18:       0.094545
        19:       0.013617

  Sorted array:

         0:       0.001838
         1:       0.013617
         2:       0.043829
         3:       0.061727
         4:       0.066119
         5:       0.094545
         6:       0.109957
         7:       0.218418
         8:       0.257578
         9:       0.350752
        10:       0.401306
        11:       0.415307
        12:       0.449539
        13:       0.561695
        14:       0.633966
        15:       0.754673
        16:       0.797287
        17:       0.829509
        18:       0.897504
        19:       0.956318

TEST138
  R8VEC_SORT_HEAP_A ascending sorts an R8VEC.


  Original array:

         1:      13.105098
         2:      57.379055
         3:      49.770554
         4:      33.701727
         5:      24.918425
         6:       3.967124
         7:      15.454668
         8:       6.597408
         9:       2.629740
        10:      38.037943

  Ascending sorted array:

         1:       0.110302
         2:       0.817013
         3:       2.629740
         4:       3.703634
         5:       3.967124
         6:       5.672685
         7:       6.597408
         8:      13.105098
         9:      15.454668
        10:      21.045140

TEST139
  R8VEC_SORT_HEAP_D descending sorts an R8VEC.


  Original array:

         1:      13.105098
         2:      57.379055
         3:      49.770554
         4:      33.701727
         5:      24.918425
         6:       3.967124
         7:      15.454668
         8:       6.597408
         9:       2.629740
        10:      38.037943

  Descending sorted array:

         1:       0.110302
         2:      57.379055
         3:      33.701727
         4:      38.037943
         5:       0.817013
         6:      45.280409
         7:       6.597408
         8:      21.045140
         9:      24.918425
        10:       3.703634

TEST140
  R8VEC_SORT_HEAP_INDEX_A_NEW creates an ascending
  sort index for an R8VEC.
  R8VEC_SORT_HEAP_INDEX_D_NEW creates a descending
  sort index for an R8VEC.

  Unsorted array:

         0:      13.105098
         1:      57.379055
         2:      49.770554
         3:      33.701727
         4:      24.918425
         5:       3.967124
         6:      15.454668
         7:       6.597408
         8:       2.629740
         9:      38.037943
        10:       3.703634
        11:      26.972338
        12:      24.078377
        13:      45.280409
        14:      47.837217
        15:       0.110302
        16:      53.850244
        17:      21.045140
        18:       5.672685
        19:       0.817013

  After indexed ascending sort:

         I INDX(I)       A(I)

         0        15       13.1051
         1        19       57.3791
         2         8       49.7706
         3        10       33.7017
         4         5       24.9184
         5        18       3.96712
         6         7       15.4547
         7         0       6.59741
         8         6       2.62974
         9        17       38.0379
        10        12       3.70363
        11         4       26.9723
        12        11       24.0784
        13         3       45.2804
        14         9       47.8372
        15        13      0.110302
        16        14       53.8502
        17         2       21.0451
        18        16       5.67269
        19         1      0.817013

  Now use the index array to carry out the
  permutation implicitly.

   INDX(I)  A(INDX(I))

        15      0.110302
        19      0.817013
         8       2.62974
        10       3.70363
         5       3.96712
        18       5.67269
         7       6.59741
         0       13.1051
         6       15.4547
        17       21.0451
        12       24.0784
         4       24.9184
        11       26.9723
         3       33.7017
         9       38.0379
        13       45.2804
        14       47.8372
         2       49.7706
        16       53.8502
         1       57.3791

  Call R8VEC_PERMUTE to carry out the permutation explicitly.


  I, A(I)

         0:       0.110302
         1:       0.817013
         2:       2.629740
         3:       3.703634
         4:       3.967124
         5:       5.672685
         6:       6.597408
         7:      13.105098
         8:      15.454668
         9:      21.045140
        10:      24.078377
        11:      24.918425
        12:      26.972338
        13:      33.701727
        14:      38.037943
        15:      45.280409
        16:      47.837217
        17:      49.770554
        18:      53.850244
        19:      57.379055

  After indexed descending sort:

         I  INDX(I)  A(I)

         0         1       13.1051
         1        16       57.3791
         2         2       49.7706
         3        14       33.7017
         4        13       24.9184
         5         9       3.96712
         6         3       15.4547
         7        11       6.59741
         8         4       2.62974
         9        12       38.0379
        10        17       3.70363
        11         6       26.9723
        12         0       24.0784
        13         7       45.2804
        14        18       47.8372
        15         5      0.110302
        16        10       53.8502
        17         8       21.0451
        18        19       5.67269
        19        15      0.817013

  Now use the index array to carry out the
  permutation implicitly.

   INDX(I)  ARRAY(INDX(I))

         1       57.3791
        16       53.8502
         2       49.7706
        14       47.8372
        13       45.2804
         9       38.0379
         3       33.7017
        11       26.9723
         4       24.9184
        12       24.0784
        17       21.0451
         6       15.4547
         0       13.1051
         7       6.59741
        18       5.67269
         5       3.96712
        10       3.70363
         8       2.62974
        19      0.817013
        15      0.110302

TEST141
  R8VEC_SORT_HEAP_MASK_A creates an ascending
  sort index for a masked R8VEC.

  Unsorted array:

         0:      13.105098
         1:      57.379055
         2:      49.770554
         3:      33.701727
         4:      24.918425
         5:       3.967124
         6:      15.454668
         7:       6.597408
         8:       2.629740
         9:      38.037943
        10:       3.703634
        11:      26.972338
        12:      24.078377
        13:      45.280409
        14:      47.837217
        15:       0.110302
        16:      53.850244
        17:      21.045140
        18:       5.672685
        19:       0.817013

  The mask array:

       0:        2
       1:        4
       2:        7
       3:        8
       4:        9
       5:       12
       6:       13
       7:       16
       8:       18
       9:       19

  Masked vector printout:

  The masked unsorted array:

       0       2     57.379055
       1       4     33.701727
       2       7     15.454668
       3       8      6.597408
       4       9      2.629740
       5      12     26.972338
       6      13     24.078377
       7      16      0.110302
       8      18     21.045140
       9      19      5.672685

  After masked indexed ascending sort:

  I, INDX(I), MASK(INDX(I)), A(MASK(INDX(I)))

       1       8      16        0.110302
       2       5       9         2.62974
       3      10      19         5.67269
       4       4       8         6.59741
       5       3       7         15.4547
       6       9      18         21.0451
       7       7      13         24.0784
       8       6      12         26.9723
       9       2       4         33.7017
      10       1       2         57.3791

  Call I4VEC_PERMUTE to carry out the index permutation
  explicitly on the MASK vector.


  The reordered mask array:

       0:       16
       1:        9
       2:       19
       3:        8
       4:        7
       5:       18
       6:       13
       7:       12
       8:        4
       9:        2

  Masked vector printout:

  The reordered masked sorted array:

       0      16      0.110302
       1       9      2.629740
       2      19      5.672685
       3       8      6.597408
       4       7     15.454668
       5      18     21.045140
       6      13     24.078377
       7      12     26.972338
       8       4     33.701727
       9       2     57.379055

TEST142
  R8VEC_SORT_INSERT_A ascending sorts an R8VEC.

  Unsorted array:

         1:      13.105098
         2:      57.379055
         3:      49.770554
         4:      33.701727
         5:      24.918425
         6:       3.967124
         7:      15.454668
         8:       6.597408
         9:       2.629740
        10:      38.037943

  Sorted array:

         1:       0.110302
         2:       0.817013
         3:       2.629740
         4:       3.703634
         5:       3.967124
         6:       5.672685
         7:       6.597408
         8:      13.105098
         9:      15.454668
        10:      21.045140

TEST143
  R8VEC_SORT_INSERT_INDEX_A creates an ascending
  sort index for an R8VEC.

  Unsorted array:

         1:      13.105098
         2:      57.379055
         3:      49.770554
         4:      33.701727
         5:      24.918425
         6:       3.967124
         7:      15.454668
         8:       6.597408
         9:       2.629740
        10:      38.037943

  After indexed ascending sort:

  I, INDX(I), A(I)

       1      16       13.1051
       2      20       57.3791
       3       9       49.7706
       4      11       33.7017
       5       6       24.9184
       6      19       3.96712
       7       8       15.4547
       8       1       6.59741
       9       7       2.62974
      10      18       38.0379
      11      13       3.70363
      12       5       26.9723
      13      12       24.0784
      14       4       45.2804
      15      10       47.8372
      16      14      0.110302
      17      15       53.8502
      18       3       21.0451
      19      17       5.67269
      20       2      0.817013

  Now use the index array to carry out the
  permutation implicitly.

  I, INDX(I), A(INDX(I))

       1      16      0.110302
       2      20      0.817013
       3       9       2.62974
       4      11       3.70363
       5       6       3.96712
       6      19       5.67269
       7       8       6.59741
       8       1       13.1051
       9       7       15.4547
      10      18       21.0451
      11      13       24.0784
      12       5       24.9184
      13      12       26.9723
      14       4       33.7017
      15      10       38.0379
      16      14       45.2804
      17      15       47.8372
      18       3       49.7706
      19      17       53.8502
      20       2       57.3791

  Call R8VEC_PERMUTE to carry out the permutation explicitly.


  Permuted data

         1:       0.110302
         2:       0.817013
         3:       2.629740
         4:       3.703634
         5:       3.967124
         6:       5.672685
         7:       6.597408
         8:      13.105098
         9:      15.454668
        10:      21.045140

TEST144
  R8VEC_SORT_QUICK_A sorts an R8VEC
  using quick sort.

  Unsorted array:

         0:       2.184183
         1:       9.563176
         2:       8.295092
         3:       5.616954
         4:       4.153071
         5:       0.661187
         6:       2.575778
         7:       1.099568
         8:       0.438290
         9:       6.339657
        10:       0.617272
        11:       4.495390
        12:       4.013063
        13:       7.546735
        14:       7.972870
        15:       0.018384
        16:       8.975041
        17:       3.507523
        18:       0.945448
        19:       0.136169

  Sorted array:

         0:       0.018384
         1:       0.136169
         2:       0.438290
         3:       0.617272
         4:       0.661187
         5:       0.945448
         6:       1.099568
         7:       2.184183
         8:       2.575778
         9:       3.507523
        10:       4.013063
        11:       4.153071
        12:       4.495390
        13:       5.616954
        14:       6.339657
        15:       7.546735
        16:       7.972870
        17:       8.295092
        18:       8.975041
        19:       9.563176

TEST145
  For ascending order:
  R8VEC_SORTED_MERGE_A merges two sorted R8VEC's;

  Using initial random number seed = 123456789

  Sorted vector A:

         0:       0.043829
         1:       0.066119
         2:       0.109957
         3:       0.218418
         4:       0.257578
         5:       0.415307
         6:       0.561695
         7:       0.633966
         8:       0.829509
         9:       0.956318

  Sorted vector B:

         0:       0.001838
         1:       0.013617
         2:       0.061727
         3:       0.094545
         4:       0.350752
         5:       0.401306
         6:       0.449539
         7:       0.754673
         8:       0.797287
         9:       0.897504

  Merged vector C:

         0:       0.001838
         1:       0.013617
         2:       0.043829
         3:       0.061727
         4:       0.066119
         5:       0.094545
         6:       0.109957
         7:       0.218418
         8:       0.257578
         9:       0.350752
        10:       0.401306
        11:       0.415307
        12:       0.449539
        13:       0.561695
        14:       0.633966
        15:       0.754673
        16:       0.797287
        17:       0.829509
        18:       0.897504
        19:       0.956318

TEST146
  R8VEC_SORTED_NEAREST finds the nearest entry
  in a sorted real array.

  Sorted array:

         0:       0.438290
         1:       0.661187
         2:       1.099568
         3:       2.184183
         4:       2.575778
         5:       4.153071
         6:       5.616954
         7:       6.339657
         8:       8.295092
         9:       9.563176

     Test        Nearest
     Value    Index   Value

  0.0617272       1   0.43829
  0.449539       1   0.43829
  0.401306       1   0.43829
  0.754673       2  0.661187
  0.797287       2  0.661187
  0.00183837       1   0.43829
  0.897504       3   1.09957
  0.350752       1   0.43829
  0.0945448       1   0.43829
  0.0136169       1   0.43829

TEST1465
  R8VEC_SORTED_RANGE seeks the range of indices
  in a sorted vector R so that
  R_LO <= R(I_LO:I_HI) <= R_HI.

  Sorted array R:

         0:       0.043829
         1:       0.066119
         2:       0.109957
         3:       0.218418
         4:       0.257578
         5:       0.415307
         6:       0.561695
         7:       0.633966
         8:       0.829509
         9:       0.956318

  R_LO        0.061727
     1        0.066119
     2        0.109957
     3        0.218418
     4        0.257578
     5        0.415307
  R_HI        0.449539

  Sorted array R:

         0:       0.001838
         1:       0.013617
         2:       0.094545
         3:       0.350752
         4:       0.401306
         5:       0.754673
         6:       0.797287
         7:       0.840847
         8:       0.859097
         9:       0.897504

  R_LO        0.007512
     1        0.013617
     2        0.094545
  R_HI        0.123104

  Sorted array R:

         0:       0.113664
         1:       0.260303
         2:       0.267132
         3:       0.351629
         4:       0.453794
         5:       0.561662
         6:       0.692066
         7:       0.822887
         8:       0.861216
         9:       0.912484

  R_LO        0.597917
     6        0.692066
     7        0.822887
     8        0.861216
  R_HI        0.911977

  Sorted array R:

         0:       0.185314
         1:       0.188955
         2:       0.212930
         3:       0.361529
         4:       0.367027
         5:       0.396988
         6:       0.574366
         7:       0.617205
         8:       0.714471
         9:       0.761492

  R_LO        0.117707
     0        0.185314
     1        0.188955
     2        0.212930
  R_HI        0.299329

  Sorted array R:

         0:       0.061862
         1:       0.088283
         2:       0.308675
         3:       0.710781
         4:       0.745303
         5:       0.763537
         6:       0.777994
         7:       0.824660
         8:       0.825003
         9:       0.899373

  R_LO        0.406970
     3        0.710781
     4        0.745303
  R_HI        0.761731

TEST147
  R8VEC_SORTED_SPLIT splits a sorted vector into
  entries less than and greater than a
  splitting value.
  R8VEC_SPLIT splits an unsorted vector
  in the same way.


  The sorted array:

         0:       0.000000
         1:       0.000000
         2:       0.000000
         3:       0.000000
         4:       0.500000
         5:       0.500000
         6:       0.500000
         7:       0.500000
         8:       0.500000
         9:       1.000000
        10:       1.500000
        11:       1.500000
        12:       2.000000
        13:       2.000000
        14:       2.000000
        15:       2.000000
        16:       3.000000
        17:       3.000000
        18:       4.000000
        19:       4.000000
        20:       4.000000
        21:       4.000000
        22:       4.500000
        23:       4.500000
        24:       5.000000

  Splitting value is 2.5

  Lower index I_LT = 16
  Upper index I_GT = 17

  Now repeat test with R8VEC_SPLIT.


  The shuffled array:

         0:       4.500000
         1:       0.000000
         2:       1.500000
         3:       4.000000
         4:       1.000000
         5:       4.000000
         6:       3.000000
         7:       0.000000
         8:       2.000000
         9:       4.500000
        10:       0.500000
        11:       2.000000
        12:       0.000000
        13:       3.000000
        14:       0.500000
        15:       4.000000
        16:       4.000000
        17:       2.000000
        18:       0.500000
        19:       0.000000
        20:       0.500000
        21:       1.500000
        22:       0.500000
        23:       5.000000
        24:       2.000000

  The split array:

         0:       2.000000
         1:       0.000000
         2:       1.500000
         3:       0.500000
         4:       1.000000
         5:       1.500000
         6:       0.500000
         7:       0.000000
         8:       2.000000
         9:       0.000000
        10:       0.500000
        11:       2.000000
        12:       0.000000
        13:       0.500000
        14:       0.500000
        15:       2.000000
        16:       4.000000
        17:       4.000000
        18:       3.000000
        19:       4.500000
        20:       3.000000
        21:       4.000000
        22:       5.000000
        23:       4.000000
        24:       4.500000

  Array entries <= SPLIT up to index 16

R8LIB_TEST1475
  R8VEC_SORTED_UNDEX produces index vectors which create a sorted
  list of the unique elements of a sorted R8VEC,
  and a map from the original vector to the (implicit)
  vector of sorted unique elements.

  The vector X:

         0:      11.000000
         1:      11.000000
         2:      11.000000
         3:      22.000000
         4:      22.000000
         5:      33.000000
         6:      33.000000
         7:      55.000000
         8:      55.000000

  Number of unique entries in X is 4

  UNDX can be used to list the unique elements of X
  in sorted order.

     I  UNDX   X(UNDX)

     0     0        11
     1     3        22
     2     5        33
     3     7        55

  UNDX can be used to created XU, a copy of X
  containing only the unique elements, in sorted order.

     I  UNDX     XU(I)

     0     0        11
     1     3        22
     2     5        33
     3     7        55

  XDNU can be used to match each element of X with one of the
  unique elements

     I  XDNU  X(I)   XU(XDNU(I))

     0     0      11            11     1     0      11            11     2     0      11            11     3     1      22            22     4     1      22            22     5     2      33            33     6     2      33            33     7     3      55            55     8     3      55            55
TEST148
  R8VEC_SORTED_UNIQUE finds unique entries in a sorted R8VEC;

  Unsorted array:

         1:       4.000000
         2:      19.000000
         3:      17.000000
         4:      11.000000
         5:       8.000000
         6:       1.000000
         7:       5.000000
         8:       2.000000
         9:       1.000000
        10:      13.000000

  Unique entries

         0:       0.000000
         1:       1.000000
         2:       2.000000
         3:       4.000000
         4:       5.000000
         5:       7.000000
         6:       8.000000
         7:       9.000000
         8:      11.000000
         9:      13.000000
        10:      15.000000
        11:      16.000000
        12:      17.000000
        13:      18.000000
        14:      19.000000

TEST149
  R8VEC_SORTED_UNIQUE_COUNT counts unique entries in a sorted R8VEC;

  Using a tolerance of 0.25
  R8VEC_SORTED_UNIQUE_COUNT counts 30 unique entries in A.

TEST150
  R8VEC_SORTED_UNIQUE_HIST stores the unique entries
  and their multiplicities.

  Using random seed 123456789.

  Unsorted array:

         0:       6.500000
         1:      28.500000
         2:      24.500000
         3:      16.500000
         4:      12.500000
         5:       1.500000
         6:       7.500000
         7:       3.500000
         8:       1.500000
         9:      19.500000
        10:       1.500000
        11:      13.500000
        12:      12.500000
        13:      22.500000
        14:      23.500000
        15:       0.500000
        16:      26.500000
        17:      10.500000
        18:       2.500000
        19:       0.500000
        20:      25.500000
        21:      25.500000
        22:       3.500000
        23:       0.500000
        24:       7.500000
        25:      27.500000
        26:       3.500000
        27:      10.500000
        28:      24.500000
        29:       8.500000

  Sorted array:

         0:       0.500000
         1:       0.500000
         2:       0.500000
         3:       1.500000
         4:       1.500000
         5:       1.500000
         6:       2.500000
         7:       3.500000
         8:       3.500000
         9:       3.500000
        10:       6.500000
        11:       7.500000
        12:       7.500000
        13:       8.500000
        14:      10.500000
        15:      10.500000
        16:      12.500000
        17:      12.500000
        18:      13.500000
        19:      16.500000
        20:      19.500000
        21:      22.500000
        22:      23.500000
        23:      24.500000
        24:      24.500000
        25:      25.500000
        26:      25.500000
        27:      26.500000
        28:      27.500000
        29:      28.500000

  R8VEC_SORTED_UNIQUE_HIST counts 19 unique entries.

  Value  Multiplicity

     0           0.5       3
     1           1.5       3
     2           2.5       1
     3           3.5       3
     4           6.5       1
     5           7.5       2
     6           8.5       1
     7          10.5       2
     8          12.5       2
     9          13.5       1
    10          16.5       1
    11          19.5       1
    12          22.5       1
    13          23.5       1
    14          24.5       2
    15          25.5       2
    16          26.5       1
    17          27.5       1
    18          28.5       1

R8LIB_TEST1504
  R8VEC_TRANSPOSE_PRINT prints an R8VEC "tranposed",
  that is, placing multiple entries on a line.

  The vector X:

      0.218418      0.956318      0.829509      0.561695      0.415307
      0.066119      0.257578      0.109957      0.043829      0.633966
      0.061727      0.449539

R8LIB_TEST1505
  R8VEC_UNDEX produces index vectors which create a sorted
  list of the unique elements of an (unsorted) R8VEC,
  and a map from the original vector to the (implicit)
  vector of sorted unique elements.

  The vector X:

         0:      33.000000
         1:      55.000000
         2:      11.000000
         3:      11.000000
         4:      55.000000
         5:      33.000000
         6:      22.000000
         7:      22.000000
         8:      11.000000

  Number of unique entries in X is 4

  UNDX can be used to list the unique elements of X
  in sorted order.

     I  UNDX   X(UNDX)

     0     2        11
     1     6        22
     2     5        33
     3     4        55

  UNDX can be used to created XU, a copy of X
  containing only the unique elements, in sorted order.

     I  UNDX     XU(I)

     0     2        11
     1     6        22
     2     5        33
     3     4        55

  XDNU can be used to match each element of X with one of the
  unique elements

     I  XDNU  X(I)   XU(XDNU(I))

     0     2    33            33
     1     3    55            55
     2     0    11            11
     3     0    11            11
     4     3    55            55
     5     2    33            33
     6     1    22            22
     7     1    22            22
     8     0    11            11

TEST151
  R8VEC_UNIFORM returns a random real vector
  with entries in a given range [ B, C ]

  For this problem:
  B = 10
  C = 20


  Input SEED = 123456789


  Random vector:

         1:      12.184183
         2:      19.563176
         3:      18.295092
         4:      15.616954
         5:      14.153071
         6:      10.661187
         7:      12.575778
         8:      11.099568
         9:      10.438290
        10:      16.339657

  Input SEED = 29242052


  Random vector:

         1:      18.590969
         2:      18.408475
         3:      11.231039
         4:      10.075124
         5:      12.603030
         6:      19.124837
         7:      11.136640
         8:      13.516287
         9:      18.228873
        10:      12.671323

  Input SEED = 397959036


  Random vector:

         1:      15.743659
         2:      13.670267
         3:      16.172048
         4:      13.615287
         5:      12.129300
         6:      17.144712
         7:      11.177069
         8:      12.993291
         9:      18.250030
        10:      18.246601

TEST153
  For a pair of R8VEC's:
  R8VEC2_SORT_A ascending sorts;
  R8VEC2_SORT_D descending sorts;

  The pair of arrays:

     0:       1.436837        5.308636
     1:       2.912635        7.247695
     2:       1.436837        5.308636
     3:       2.123391        8.773367
     4:       1.830614        8.986435
     5:       2.912635        7.247695
     6:       1.515156        9.487520
     7:       1.219914        6.753762
     8:       1.436837        5.308636
     9:       2.267931        5.068084

  Arrays after ascending sort:

     0:       1.219914        6.753762
     1:       1.436837        5.308636
     2:       1.436837        5.308636
     3:       1.436837        5.308636
     4:       1.515156        9.487520
     5:       1.830614        8.986435
     6:       2.123391        8.773367
     7:       2.267931        5.068084
     8:       2.912635        7.247695
     9:       2.912635        7.247695

  Arrays after descending sort:

     0:       2.912635        7.247695
     1:       2.912635        7.247695
     2:       2.267931        5.068084
     3:       2.123391        8.773367
     4:       1.830614        8.986435
     5:       1.515156        9.487520
     6:       1.436837        5.308636
     7:       1.436837        5.308636
     8:       1.436837        5.308636
     9:       1.219914        6.753762

TEST154
  R8VEC2_SORT_HEAP_INDEX_A creates a sort index
  for an (X,Y) array.

  The unsorted array:

         I  X(I), Y(I)

         0           0.2             1         1          0.85          0.55         2           0.4          0.05         3          0.25           0.1         4             0          0.65         5          0.05          0.45         6           0.4          0.75         7           0.8             0         8           0.9          0.35         9          0.05             0        10           0.9          0.85        11           0.1             0        12          0.25          0.95        13           0.1          0.35        14          0.85          0.25        15           0.7          0.55        16           0.9          0.45        17          0.95           0.6        18          0.15          0.75        19           0.4          0.15
  After sorting:

         I  INDX(I), X(I), Y(I)

         0         4           0.2             1
         1         9          0.85          0.55
         2         5           0.4          0.05
         3        11          0.25           0.1
         4        13             0          0.65
         5        18          0.05          0.45
         6         0           0.4          0.75
         7         3           0.8             0
         8        12           0.9          0.35
         9         2          0.05             0
        10        19           0.9          0.85
        11         6           0.1             0
        12        15          0.25          0.95
        13         7           0.1          0.35
        14        14          0.85          0.25
        15         1           0.7          0.55
        16         8           0.9          0.45
        17        16          0.95           0.6
        18        10          0.15          0.75
        19        17           0.4          0.15

  Now use the index array to carry out the
  permutation implicitly.

         I  INDX(I), X(INDX(I)), Y(INDX(I))

         0         4             0          0.65
         1         9          0.05             0
         2         5          0.05          0.45
         3        11           0.1             0
         4        13           0.1          0.35
         5        18          0.15          0.75
         6         0           0.2             1
         7         3          0.25           0.1
         8        12          0.25          0.95
         9         2           0.4          0.05
        10        19           0.4          0.15
        11         6           0.4          0.75
        12        15           0.7          0.55
        13         7           0.8             0
        14        14          0.85          0.25
        15         1          0.85          0.55
        16         8           0.9          0.35
        17        16           0.9          0.45
        18        10           0.9          0.85
        19        17          0.95           0.6

  R8VEC_PERMUTE carries out the permutation.

         I X(I), Y(I)

         0             0          0.65
         1          0.05             0
         2          0.05          0.45
         3           0.1             0
         4           0.1          0.35
         5          0.15          0.75
         6           0.2             1
         7          0.25           0.1
         8          0.25          0.95
         9           0.4          0.05
        10           0.4          0.15
        11           0.4          0.75
        12           0.7          0.55
        13           0.8             0
        14          0.85          0.25
        15          0.85          0.55
        16           0.9          0.35
        17           0.9          0.45
        18           0.9          0.85
        19          0.95           0.6

TEST155
  For a pair of R8VEC's:
  R8VEC2_SORTED_UNIQUE counts unique entries.

  The pair of arrays:

     0:       1.436837        5.308636
     1:       2.912635        7.247695
     2:       1.436837        5.308636
     3:       2.123391        8.773367
     4:       1.830614        8.986435
     5:       2.912635        7.247695
     6:       1.515156        9.487520
     7:       1.219914        6.753762
     8:       1.436837        5.308636
     9:       2.267931        5.068084

  Arrays after ascending sort:

     0:       1.219914        6.753762
     1:       1.436837        5.308636
     2:       1.436837        5.308636
     3:       1.436837        5.308636
     4:       1.515156        9.487520
     5:       1.830614        8.986435
     6:       2.123391        8.773367
     7:       2.267931        5.068084
     8:       2.912635        7.247695
     9:       2.912635        7.247695

  UNIQed array:

     0:       1.219914        6.753762
     1:       1.436837        5.308636
     2:       1.515156        9.487520
     3:       1.830614        8.986435
     4:       2.123391        8.773367
     5:       2.267931        5.068084
     6:       2.912635        7.247695

TEST156
  For a pair of R8VEC's:
  R8VEC2_SORTED_UNIQUE_INDEX indexes unique entries.

  The pair of arrays:

     0:       1.436837        5.308636
     1:       2.912635        7.247695
     2:       1.436837        5.308636
     3:       2.123391        8.773367
     4:       1.830614        8.986435
     5:       2.912635        7.247695
     6:       1.515156        9.487520
     7:       1.219914        6.753762
     8:       1.436837        5.308636
     9:       2.267931        5.068084

  The number of unique elements is 10

  Index of Unique Elements:

       0:        1
       1:        2
       2:        3
       3:        4
       4:        5
       5:        6
       6:        7
       7:        8
       8:        9
       9:       10

  After Indexed Nonunique Deletion.

     0:       1.436837        5.308636
     1:       2.912635        7.247695
     2:       1.436837        5.308636
     3:       2.123391        8.773367
     4:       1.830614        8.986435
     5:       2.912635        7.247695
     6:       1.515156        9.487520
     7:       1.219914        6.753762
     8:       1.436837        5.308636
     9:       2.267931        5.068084

TEST157
  For a pair of R8VEC's:
  R8VEC2_SUM_MAX_INDEX: index of the sum vector
  with maximum value.

  The pair of vectors:

     0:       2.184183        0.308636
     1:       9.563176        2.247695
     2:       8.295092        2.006531
     3:       5.616954        3.773367
     4:       4.153071        3.986435
     5:       0.661187        0.009192
     6:       2.575778        4.487520
     7:       1.099568        1.753762
     8:       0.438290        0.472724
     9:       6.339657        0.068084

  Index of maximum in A+B: 2

TEST158
  R8VECS_PRINT prints a packed R8VEC.

  Packed R8VEC:

                   11            12            13
                   21            22
                   31            32            33            34            35
                   36            37
                   41            42
                   51

R8LIB_PRB
  Normal end of execution.

19 October 2012 10:34:27 PM
